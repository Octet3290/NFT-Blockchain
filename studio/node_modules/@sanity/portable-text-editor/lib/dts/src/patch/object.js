var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { omit, clone, isObject } from 'lodash';
import applyPatch from './applyPatch';
export default function apply(value, patch) {
    var nextValue = clone(value);
    if (patch.path.length === 0) {
        // its directed to me
        if (patch.type === 'set') {
            if (!isObject(patch.value)) {
                // eslint-disable-line max-depth
                throw new Error('Cannot set value of an object to a non-object');
            }
            return patch.value;
        }
        else if (patch.type === 'unset') {
            return undefined;
        }
        else if (patch.type === 'setIfMissing') {
            // console.log('IS IT missing?', value)
            return value === undefined ? patch.value : value;
        }
        throw new Error("Invalid object operation: ".concat(patch.type));
    }
    // The patch is not directed to me
    var _a = __read(patch.path), head = _a[0], tail = _a.slice(1);
    if (typeof head !== 'string') {
        throw new Error("Expected field name to be a string, instad got: ".concat(head));
    }
    if (tail.length === 0 && patch.type === 'unset') {
        return omit(nextValue, head);
    }
    nextValue[head] = applyPatch(nextValue[head], __assign(__assign({}, patch), { path: tail }));
    return nextValue;
}
//# sourceMappingURL=object.js.map