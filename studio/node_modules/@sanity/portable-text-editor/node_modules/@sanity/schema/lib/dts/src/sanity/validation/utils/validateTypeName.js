var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import leven from 'leven';
import humanize from 'humanize-list';
import { error, HELP_IDS } from '../createValidationResult';
var quote = function (str) { return "\"".concat(str, "\""); };
export function validateTypeName(typeName, visitorContext) {
    var possibleTypeNames = visitorContext.getTypeNames();
    if (!typeName) {
        return [
            error("Type is missing a type. Valid types are: ".concat(humanize(possibleTypeNames)), HELP_IDS.TYPE_MISSING_TYPE),
        ];
    }
    if (typeof typeName !== 'string') {
        return [
            error("Type has an invalid \"type\"-property - should be a string. Valid types are: ".concat(humanize(possibleTypeNames)), HELP_IDS.TYPE_MISSING_TYPE),
        ];
    }
    var isValid = possibleTypeNames.includes(typeName);
    if (!isValid) {
        var suggestions = possibleTypeNames
            .map(function (possibleTypeName) {
            return [leven(typeName, possibleTypeName), possibleTypeName];
        })
            .filter(function (_a) {
            var _b = __read(_a, 1), distance = _b[0];
            return distance < 3;
        })
            .map(function (_a) {
            var _b = __read(_a, 2), _ = _b[0], name = _b[1];
            return name;
        });
        var suggestion = suggestions.length > 0
            ? " Did you mean ".concat(humanize(suggestions.map(quote), { conjunction: 'or' }), "?")
            : '';
        return [
            error("Unknown type: ".concat(typeName, ".").concat(suggestion, "\n\nValid types are: ").concat(humanize(possibleTypeNames))),
        ];
    }
    return [];
}
//# sourceMappingURL=validateTypeName.js.map