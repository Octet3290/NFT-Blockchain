import { isBlockChildrenObjectField, isBlockSchemaType, isListObjectField, isObjectSchemaType, isStyleObjectField, isTitledListValue, } from '@sanity/types';
import { findBlockType } from './findBlockType';
// Helper method for describing a blockContentType's feature set
export default function blockContentFeatures(blockContentType) {
    var _a, _b;
    if (!blockContentType) {
        throw new Error("Parameter 'blockContentType' required");
    }
    var blockType = blockContentType.of.find(findBlockType);
    if (!isBlockSchemaType(blockType)) {
        throw new Error("'block' type is not defined in this schema (required).");
    }
    var ofType = (_b = (_a = blockType.fields.find(isBlockChildrenObjectField)) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.of;
    if (!ofType) {
        throw new Error('No `of` declaration found for blocks `children` field');
    }
    var spanType = ofType.find(function (member) { return member.name === 'span'; });
    if (!spanType) {
        throw new Error('No `span` type found in `block` schema type `children` definition');
    }
    var inlineObjectTypes = ofType.filter(function (inlineType) {
        return inlineType.name !== 'span' && isObjectSchemaType(inlineType);
    });
    var blockObjectTypes = blockContentType.of.filter(function (memberType) {
        return memberType.name !== blockType.name && isObjectSchemaType(memberType);
    });
    return {
        styles: resolveEnabledStyles(blockType),
        decorators: resolveEnabledDecorators(spanType),
        annotations: resolveEnabledAnnotationTypes(spanType),
        lists: resolveEnabledListItems(blockType),
        types: {
            block: blockContentType,
            span: spanType,
            inlineObjects: inlineObjectTypes,
            blockObjects: blockObjectTypes,
        },
    };
}
function resolveEnabledStyles(blockType) {
    var styleField = blockType.fields.find(isStyleObjectField);
    if (!styleField) {
        throw new Error("A field with name 'style' is not defined in the block type (required).");
    }
    var textStyles = getTitledListValuesFromEnumListOptions(styleField.type.options);
    if (textStyles.length === 0) {
        throw new Error('The style fields need at least one style ' +
            "defined. I.e: {title: 'Normal', value: 'normal'}.");
    }
    return textStyles;
}
function resolveEnabledAnnotationTypes(spanType) {
    return spanType.annotations.map(function (annotation) { return ({
        blockEditor: annotation.blockEditor,
        title: annotation.title,
        type: annotation,
        value: annotation.name,
        icon: annotation.icon,
    }); });
}
function resolveEnabledDecorators(spanType) {
    return spanType.decorators;
}
function resolveEnabledListItems(blockType) {
    var listField = blockType.fields.find(isListObjectField);
    if (!listField) {
        throw new Error("A field with name 'list' is not defined in the block type (required).");
    }
    var listItems = getTitledListValuesFromEnumListOptions(listField.type.options);
    if (!listItems) {
        throw new Error('The list field need at least to be an empty array');
    }
    return listItems;
}
function getTitledListValuesFromEnumListOptions(options) {
    var list = options ? options.list : undefined;
    if (!Array.isArray(list)) {
        return [];
    }
    return list.map(function (item) { return (isTitledListValue(item) ? item : { title: item, value: item }); });
}
//# sourceMappingURL=blockContentTypeFeatures.js.map