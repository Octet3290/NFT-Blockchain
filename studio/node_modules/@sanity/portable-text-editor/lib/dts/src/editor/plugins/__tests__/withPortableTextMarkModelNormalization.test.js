/**
 * \@jest-environment ./test/setup/jsdom.jest.env.ts
 */
// eslint-disable-next-line import/no-unassigned-import
import '@testing-library/jest-dom/extend-expect';
import { act } from 'react-dom/test-utils';
import { render } from '@testing-library/react';
import React from 'react';
import { PortableTextEditor } from '../../PortableTextEditor';
import { PortableTextEditorTester, type } from '../../../editor/__tests__/PortableTextEditorTester';
describe('plugin:withPortableTextMarksModel: normalization', function () {
    it('merges adjacent spans correctly when removing annotations', function () {
        var _a;
        var editorRef = React.createRef();
        var initialValue = [
            {
                _key: '5fc57af23597',
                _type: 'myTestBlockType',
                children: [
                    {
                        _key: 'be1c67c6971a',
                        _type: 'span',
                        marks: [],
                        text: 'This is a ',
                    },
                    {
                        _key: '11c8c9f783a8',
                        _type: 'span',
                        marks: ['fde1fd54b544'],
                        text: 'link',
                    },
                    {
                        _key: '576c748e0cd2',
                        _type: 'span',
                        marks: [],
                        text: ', this is ',
                    },
                    {
                        _key: 'f3d73d3833bf',
                        _type: 'span',
                        marks: ['7b6d3d5de30c'],
                        text: 'another',
                    },
                    {
                        _key: '73b01f13c2ec',
                        _type: 'span',
                        marks: [],
                        text: ', and this is ',
                    },
                    {
                        _key: '13eb0d467c82',
                        _type: 'span',
                        marks: ['93a1d24eade0'],
                        text: 'a third',
                    },
                ],
                markDefs: [
                    {
                        _key: 'fde1fd54b544',
                        _type: 'link',
                        url: '1',
                    },
                    {
                        _key: '7b6d3d5de30c',
                        _type: 'link',
                        url: '2',
                    },
                    {
                        _key: '93a1d24eade0',
                        _type: 'link',
                        url: '3',
                    },
                ],
                style: 'normal',
            },
        ];
        var onChange = jest.fn();
        act(function () {
            render(React.createElement(PortableTextEditorTester, { onChange: onChange, ref: editorRef, type: type, value: initialValue }));
        });
        if (!editorRef.current) {
            throw new Error('No editor');
        }
        act(function () {
            if (editorRef.current) {
                PortableTextEditor.focus(editorRef.current);
                PortableTextEditor.select(editorRef.current, {
                    focus: { path: [{ _key: '5fc57af23597' }, 'children', { _key: '11c8c9f783a8' }], offset: 4 },
                    anchor: { path: [{ _key: '5fc57af23597' }, 'children', { _key: '11c8c9f783a8' }], offset: 0 },
                });
            }
        });
        var linkType = (_a = PortableTextEditor.getPortableTextFeatures(editorRef.current).annotations.find(function (a) { return a.type.name === 'link'; })) === null || _a === void 0 ? void 0 : _a.type;
        if (!linkType) {
            throw new Error('No link type found');
        }
        act(function () {
            if (editorRef.current) {
                PortableTextEditor.removeAnnotation(editorRef.current, linkType);
            }
        });
        expect(PortableTextEditor.getValue(editorRef.current)).toEqual([
            {
                _key: '5fc57af23597',
                _type: 'myTestBlockType',
                children: [
                    {
                        _key: 'be1c67c6971a',
                        _type: 'span',
                        marks: [],
                        text: 'This is a link, this is ',
                    },
                    {
                        _key: 'f3d73d3833bf',
                        _type: 'span',
                        marks: ['7b6d3d5de30c'],
                        text: 'another',
                    },
                    {
                        _key: '73b01f13c2ec',
                        _type: 'span',
                        marks: [],
                        text: ', and this is ',
                    },
                    {
                        _key: '13eb0d467c82',
                        _type: 'span',
                        marks: ['93a1d24eade0'],
                        text: 'a third',
                    },
                ],
                markDefs: [
                    {
                        _key: '7b6d3d5de30c',
                        _type: 'link',
                        url: '2',
                    },
                    {
                        _key: '93a1d24eade0',
                        _type: 'link',
                        url: '3',
                    },
                ],
                style: 'normal',
            },
        ]);
    });
    it('splits correctly when adding marks', function () {
        var editorRef = React.createRef();
        var initialValue = [
            {
                _key: 'a',
                _type: 'myTestBlockType',
                children: [
                    {
                        _key: 'a1',
                        _type: 'span',
                        marks: [],
                        text: '123',
                    },
                ],
                markDefs: [],
                style: 'normal',
            },
            {
                _key: 'b',
                _type: 'myTestBlockType',
                children: [
                    {
                        _key: 'b1',
                        _type: 'span',
                        marks: [],
                        text: '123',
                    },
                ],
                markDefs: [],
                style: 'normal',
            },
        ];
        var onChange = jest.fn();
        act(function () {
            render(React.createElement(PortableTextEditorTester, { onChange: onChange, ref: editorRef, type: type, value: initialValue }));
        });
        if (!editorRef.current) {
            throw new Error('No editor');
        }
        act(function () {
            if (editorRef.current) {
                PortableTextEditor.focus(editorRef.current);
                PortableTextEditor.select(editorRef.current, {
                    focus: { path: [{ _key: 'a' }, 'children', { _key: 'a1' }], offset: 0 },
                    anchor: { path: [{ _key: 'b' }, 'children', { _key: 'b1' }], offset: 1 },
                });
            }
        });
        act(function () {
            if (editorRef.current) {
                PortableTextEditor.toggleMark(editorRef.current, 'bold');
            }
        });
        expect(PortableTextEditor.getValue(editorRef.current)).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"_key\": \"a\",\n          \"_type\": \"myTestBlockType\",\n          \"children\": Array [\n            Object {\n              \"_key\": \"a1\",\n              \"_type\": \"span\",\n              \"marks\": Array [\n                \"bold\",\n              ],\n              \"text\": \"123\",\n            },\n          ],\n          \"markDefs\": Array [],\n          \"style\": \"normal\",\n        },\n        Object {\n          \"_key\": \"b\",\n          \"_type\": \"myTestBlockType\",\n          \"children\": Array [\n            Object {\n              \"_key\": \"b1\",\n              \"_type\": \"span\",\n              \"marks\": Array [\n                \"bold\",\n              ],\n              \"text\": \"1\",\n            },\n            Object {\n              \"_key\": \"1\",\n              \"_type\": \"span\",\n              \"marks\": Array [],\n              \"text\": \"23\",\n            },\n          ],\n          \"markDefs\": Array [],\n          \"style\": \"normal\",\n        },\n      ]\n    ");
    });
    it('merges children correctly when toggling marks in various ranges', function () {
        var editorRef = React.createRef();
        var initialValue = [
            {
                _key: 'a',
                _type: 'myTestBlockType',
                children: [
                    {
                        _key: 'a1',
                        _type: 'span',
                        marks: [],
                        text: '1234',
                    },
                ],
                markDefs: [],
                style: 'normal',
            },
        ];
        var onChange = jest.fn();
        act(function () {
            render(React.createElement(PortableTextEditorTester, { onChange: onChange, ref: editorRef, type: type, value: initialValue }));
        });
        if (!editorRef.current) {
            throw new Error('No editor');
        }
        act(function () {
            if (editorRef.current) {
                PortableTextEditor.focus(editorRef.current);
                PortableTextEditor.select(editorRef.current, {
                    focus: { path: [{ _key: 'a' }, 'children', { _key: 'a1' }], offset: 0 },
                    anchor: { path: [{ _key: 'a' }, 'children', { _key: 'a1' }], offset: 4 },
                });
            }
        });
        act(function () {
            if (editorRef.current) {
                PortableTextEditor.toggleMark(editorRef.current, 'bold');
            }
        });
        expect(PortableTextEditor.getValue(editorRef.current)).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"_key\": \"a\",\n          \"_type\": \"myTestBlockType\",\n          \"children\": Array [\n            Object {\n              \"_key\": \"a1\",\n              \"_type\": \"span\",\n              \"marks\": Array [\n                \"bold\",\n              ],\n              \"text\": \"1234\",\n            },\n          ],\n          \"markDefs\": Array [],\n          \"style\": \"normal\",\n        },\n      ]\n    ");
        act(function () {
            if (editorRef.current) {
                PortableTextEditor.select(editorRef.current, {
                    focus: { path: [{ _key: 'a' }, 'children', { _key: 'a1' }], offset: 1 },
                    anchor: { path: [{ _key: 'a' }, 'children', { _key: 'a1' }], offset: 3 },
                });
                PortableTextEditor.toggleMark(editorRef.current, 'bold');
            }
        });
        expect(PortableTextEditor.getValue(editorRef.current)).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"_key\": \"a\",\n          \"_type\": \"myTestBlockType\",\n          \"children\": Array [\n            Object {\n              \"_key\": \"a1\",\n              \"_type\": \"span\",\n              \"marks\": Array [\n                \"bold\",\n              ],\n              \"text\": \"1\",\n            },\n            Object {\n              \"_key\": \"2\",\n              \"_type\": \"span\",\n              \"marks\": Array [],\n              \"text\": \"23\",\n            },\n            Object {\n              \"_key\": \"1\",\n              \"_type\": \"span\",\n              \"marks\": Array [\n                \"bold\",\n              ],\n              \"text\": \"4\",\n            },\n          ],\n          \"markDefs\": Array [],\n          \"style\": \"normal\",\n        },\n      ]\n    ");
        act(function () {
            if (editorRef.current) {
                PortableTextEditor.select(editorRef.current, {
                    focus: { path: [{ _key: 'a' }, 'children', { _key: 'a1' }], offset: 0 },
                    anchor: { path: [{ _key: 'a' }, 'children', { _key: '1' }], offset: 1 },
                });
                PortableTextEditor.toggleMark(editorRef.current, 'bold');
            }
        });
        expect(PortableTextEditor.getValue(editorRef.current)).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"_key\": \"a\",\n          \"_type\": \"myTestBlockType\",\n          \"children\": Array [\n            Object {\n              \"_key\": \"a1\",\n              \"_type\": \"span\",\n              \"marks\": Array [],\n              \"text\": \"1234\",\n            },\n          ],\n          \"markDefs\": Array [],\n          \"style\": \"normal\",\n        },\n      ]\n    ");
    });
    it('toggles marks on children with annotation marks correctly', function () {
        var editorRef = React.createRef();
        var initialValue = [
            {
                _key: 'a',
                _type: 'myTestBlockType',
                children: [
                    {
                        _key: 'a1',
                        _type: 'span',
                        marks: ['abc'],
                        text: 'A link',
                    },
                    {
                        _key: 'a2',
                        _type: 'span',
                        marks: [],
                        text: ', not a link',
                    },
                ],
                markDefs: [
                    {
                        _type: 'link',
                        _key: 'abc',
                        href: 'http://www.link.com',
                    },
                ],
                style: 'normal',
            },
        ];
        var onChange = jest.fn();
        act(function () {
            render(React.createElement(PortableTextEditorTester, { onChange: onChange, ref: editorRef, type: type, value: initialValue }));
        });
        if (!editorRef.current) {
            throw new Error('No editor');
        }
        act(function () {
            if (editorRef.current) {
                PortableTextEditor.focus(editorRef.current);
                PortableTextEditor.select(editorRef.current, {
                    focus: { path: [{ _key: 'a' }, 'children', { _key: 'a1' }], offset: 0 },
                    anchor: { path: [{ _key: 'a' }, 'children', { _key: 'b1' }], offset: 12 },
                });
            }
        });
        act(function () {
            if (editorRef.current) {
                PortableTextEditor.toggleMark(editorRef.current, 'bold');
            }
        });
        expect(PortableTextEditor.getValue(editorRef.current)).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"_key\": \"a\",\n          \"_type\": \"myTestBlockType\",\n          \"children\": Array [\n            Object {\n              \"_key\": \"a1\",\n              \"_type\": \"span\",\n              \"marks\": Array [\n                \"abc\",\n                \"bold\",\n              ],\n              \"text\": \"A link\",\n            },\n            Object {\n              \"_key\": \"a2\",\n              \"_type\": \"span\",\n              \"marks\": Array [\n                \"bold\",\n              ],\n              \"text\": \", not a link\",\n            },\n          ],\n          \"markDefs\": Array [\n            Object {\n              \"_key\": \"abc\",\n              \"_type\": \"link\",\n              \"href\": \"http://www.link.com\",\n            },\n          ],\n          \"style\": \"normal\",\n        },\n      ]\n    ");
    });
    it('merges blocks correctly when containing links', function () {
        var editorRef = React.createRef();
        var initialValue = [
            {
                _key: '5fc57af23597',
                _type: 'myTestBlockType',
                children: [
                    {
                        _key: 'be1c67c6971a',
                        _type: 'span',
                        marks: [],
                        text: 'This is a ',
                    },
                    {
                        _key: '11c8c9f783a8',
                        _type: 'span',
                        marks: ['fde1fd54b544'],
                        text: 'link',
                    },
                ],
                markDefs: [
                    {
                        _key: 'fde1fd54b544',
                        _type: 'link',
                        url: '1',
                    },
                ],
                style: 'normal',
            },
            {
                _key: '7cd53af36712',
                _type: 'myTestBlockType',
                children: [
                    {
                        _key: '576c748e0cd2',
                        _type: 'span',
                        marks: [],
                        text: 'This is ',
                    },
                    {
                        _key: 'f3d73d3833bf',
                        _type: 'span',
                        marks: ['7b6d3d5de30c'],
                        text: 'another',
                    },
                ],
                markDefs: [
                    {
                        _key: '7b6d3d5de30c',
                        _type: 'link',
                        url: '2',
                    },
                ],
                style: 'normal',
            },
        ];
        var sel = {
            focus: { path: [{ _key: '5fc57af23597' }, 'children', { _key: '11c8c9f783a8' }], offset: 4 },
            anchor: { path: [{ _key: '7cd53af36712' }, 'children', { _key: '576c748e0cd2' }], offset: 0 },
        };
        var onChange = jest.fn();
        act(function () {
            render(React.createElement(PortableTextEditorTester, { onChange: onChange, ref: editorRef, type: type, value: initialValue }));
        });
        if (!editorRef.current) {
            throw new Error('No editor');
        }
        act(function () {
            if (editorRef.current) {
                PortableTextEditor.select(editorRef.current, sel);
                PortableTextEditor.delete(editorRef.current, sel);
            }
        });
        expect(PortableTextEditor.getValue(editorRef.current)).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"_key\": \"5fc57af23597\",\n          \"_type\": \"myTestBlockType\",\n          \"children\": Array [\n            Object {\n              \"_key\": \"be1c67c6971a\",\n              \"_type\": \"span\",\n              \"marks\": Array [],\n              \"text\": \"This is a \",\n            },\n            Object {\n              \"_key\": \"11c8c9f783a8\",\n              \"_type\": \"span\",\n              \"marks\": Array [\n                \"fde1fd54b544\",\n              ],\n              \"text\": \"link\",\n            },\n            Object {\n              \"_key\": \"576c748e0cd2\",\n              \"_type\": \"span\",\n              \"marks\": Array [],\n              \"text\": \"This is \",\n            },\n            Object {\n              \"_key\": \"f3d73d3833bf\",\n              \"_type\": \"span\",\n              \"marks\": Array [\n                \"7b6d3d5de30c\",\n              ],\n              \"text\": \"another\",\n            },\n          ],\n          \"markDefs\": Array [\n            Object {\n              \"_key\": \"fde1fd54b544\",\n              \"_type\": \"link\",\n              \"url\": \"1\",\n            },\n            Object {\n              \"_key\": \"7b6d3d5de30c\",\n              \"_type\": \"link\",\n              \"url\": \"2\",\n            },\n          ],\n          \"style\": \"normal\",\n        },\n      ]\n    ");
    });
    it('resets markDefs when splitting a block in the beginning', function () {
        var editorRef = React.createRef();
        var initialValue = [
            {
                _key: '1987f99da4a2',
                _type: 'myTestBlockType',
                children: [
                    {
                        _key: '3693e789451c',
                        _type: 'span',
                        marks: [],
                        text: '1',
                    },
                ],
                markDefs: [],
                style: 'normal',
            },
            {
                _key: '2f55670a03bb',
                _type: 'myTestBlockType',
                children: [
                    {
                        _key: '9f5ed7dee7ab',
                        _type: 'span',
                        marks: ['bab319ad3a9d'],
                        text: '2',
                    },
                ],
                markDefs: [
                    {
                        _key: 'bab319ad3a9d',
                        _type: 'link',
                        href: 'http://www.123.com',
                    },
                ],
                style: 'normal',
            },
        ];
        var sel = {
            focus: { path: [{ _key: '2f55670a03bb' }, 'children', { _key: '9f5ed7dee7ab' }], offset: 0 },
            anchor: { path: [{ _key: '2f55670a03bb' }, 'children', { _key: '9f5ed7dee7ab' }], offset: 0 },
        };
        var onChange = jest.fn();
        act(function () {
            render(React.createElement(PortableTextEditorTester, { onChange: onChange, ref: editorRef, type: type, value: initialValue }));
        });
        if (!editorRef.current) {
            throw new Error('No editor');
        }
        act(function () {
            if (editorRef.current) {
                PortableTextEditor.select(editorRef.current, sel);
                PortableTextEditor.focus(editorRef.current);
                editorRef.current.slateInstance.insertBreak();
            }
        });
        expect(PortableTextEditor.getValue(editorRef.current)).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"_key\": \"1987f99da4a2\",\n          \"_type\": \"myTestBlockType\",\n          \"children\": Array [\n            Object {\n              \"_key\": \"3693e789451c\",\n              \"_type\": \"span\",\n              \"marks\": Array [],\n              \"text\": \"1\",\n            },\n          ],\n          \"markDefs\": Array [],\n          \"style\": \"normal\",\n        },\n        Object {\n          \"_key\": \"2f55670a03bb\",\n          \"_type\": \"myTestBlockType\",\n          \"children\": Array [\n            Object {\n              \"_key\": \"9f5ed7dee7ab\",\n              \"_type\": \"span\",\n              \"marks\": Array [],\n              \"text\": \"\",\n            },\n          ],\n          \"markDefs\": Array [],\n          \"style\": \"normal\",\n        },\n        Object {\n          \"_key\": \"2\",\n          \"_type\": \"myTestBlockType\",\n          \"children\": Array [\n            Object {\n              \"_key\": \"1\",\n              \"_type\": \"span\",\n              \"marks\": Array [\n                \"bab319ad3a9d\",\n              ],\n              \"text\": \"2\",\n            },\n          ],\n          \"markDefs\": Array [\n            Object {\n              \"_key\": \"bab319ad3a9d\",\n              \"_type\": \"link\",\n              \"href\": \"http://www.123.com\",\n            },\n          ],\n          \"style\": \"normal\",\n        },\n      ]\n    ");
    });
});
//# sourceMappingURL=withPortableTextMarkModelNormalization.test.js.map