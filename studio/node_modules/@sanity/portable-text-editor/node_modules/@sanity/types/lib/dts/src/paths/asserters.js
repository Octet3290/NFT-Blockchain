var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var reKeySegment = /_key\s*==\s*['"](.*)['"]/;
var reIndexTuple = /^\d*:\d*$/;
export function isIndexSegment(segment) {
    return typeof segment === 'number' || (typeof segment === 'string' && /^\[\d+\]$/.test(segment));
}
export function isKeySegment(segment) {
    if (typeof segment === 'string') {
        return reKeySegment.test(segment.trim());
    }
    return typeof segment === 'object' && '_key' in segment;
}
export function isIndexTuple(segment) {
    if (typeof segment === 'string' && reIndexTuple.test(segment)) {
        return true;
    }
    if (!Array.isArray(segment) || segment.length !== 2) {
        return false;
    }
    var _a = __read(segment, 2), from = _a[0], to = _a[1];
    return (typeof from === 'number' || from === '') && (typeof to === 'number' || to === '');
}
//# sourceMappingURL=asserters.js.map