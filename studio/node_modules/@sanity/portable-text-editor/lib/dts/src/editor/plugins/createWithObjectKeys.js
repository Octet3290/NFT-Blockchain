var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { Element, Transforms, Node, Editor } from 'slate';
import { isPreservingKeys, PRESERVE_KEYS } from '../../utils/withPreserveKeys';
/**
 * This plugin makes sure that every new node in the editor get a new _key prop when created
 *
 */
export function createWithObjectKeys(portableTextFeatures, keyGenerator) {
    return function withKeys(editor) {
        PRESERVE_KEYS.set(editor, false);
        var apply = editor.apply, normalizeNode = editor.normalizeNode;
        editor.apply = function (operation) {
            if (operation.type === 'split_node') {
                operation.properties = __assign(__assign({}, operation.properties), { _key: keyGenerator() });
            }
            if (operation.type === 'insert_node') {
                // Must be given a new key or adding/removing marks while typing gets in trouble (duped keys)!
                var withNewKey = !isPreservingKeys(editor) || !('_key' in operation.node);
                if (!Editor.isEditor(operation.node)) {
                    operation.node = __assign(__assign({}, operation.node), (withNewKey ? { _key: keyGenerator() } : {}));
                }
            }
            apply(operation);
        };
        editor.normalizeNode = function (entry) {
            var e_1, _a;
            var _b = __read(entry, 2), node = _b[0], path = _b[1];
            if (Element.isElement(node) && node._type === portableTextFeatures.types.block.name) {
                // Set key on block itself
                if (!node._key) {
                    Transforms.setNodes(editor, { _key: keyGenerator() }, { at: path });
                }
                try {
                    // Set keys on it's children
                    for (var _c = __values(Node.children(editor, path)), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var _e = __read(_d.value, 2), child = _e[0], childPath = _e[1];
                        if (!child._key) {
                            Transforms.setNodes(editor, { _key: keyGenerator() }, { at: childPath });
                            return;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            // Do the original `normalizeNode` to enforce other constraints.
            normalizeNode(entry);
        };
        return editor;
    };
}
//# sourceMappingURL=createWithObjectKeys.js.map