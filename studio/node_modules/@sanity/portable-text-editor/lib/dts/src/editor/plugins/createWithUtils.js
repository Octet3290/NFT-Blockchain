var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { Editor, Range, Transforms, Text } from 'slate';
import { debugWithName } from '../../utils/debug';
var debug = debugWithName('plugin:withUtils');
/**
 * This plugin makes various util commands available in the editor
 *
 */
export function createWithUtils(_a) {
    var portableTextFeatures = _a.portableTextFeatures, keyGenerator = _a.keyGenerator;
    return function withUtils(editor) {
        // Expands the the selection to wrap around the word the focus is at
        editor.pteExpandToWord = function () {
            var selection = editor.selection;
            if (selection && !Range.isExpanded(selection)) {
                var _a = __read(Editor.node(editor, selection.focus, { depth: 2 }), 1), textNode = _a[0];
                if (!textNode || !Text.isText(textNode) || textNode.text.length === 0) {
                    debug("pteExpandToWord: Can't expand to word here");
                    return;
                }
                var focus_1 = selection.focus;
                var focusOffset = focus_1.offset;
                var charsBefore = textNode.text.slice(0, focusOffset);
                var charsAfter = textNode.text.slice(focusOffset, -1);
                var isEmpty_1 = function (str) { return str.match(/\s/g); };
                var whiteSpaceBeforeIndex = charsBefore
                    .split('')
                    .reverse()
                    .findIndex(function (str) { return isEmpty_1(str); });
                var newStartOffset = whiteSpaceBeforeIndex > -1 ? charsBefore.length - whiteSpaceBeforeIndex : 0;
                var whiteSpaceAfterIndex = charsAfter.split('').findIndex(function (obj) { return isEmpty_1(obj); });
                var newEndOffset = charsBefore.length +
                    (whiteSpaceAfterIndex > -1 ? whiteSpaceAfterIndex : charsAfter.length + 1);
                if (!(newStartOffset === newEndOffset || isNaN(newStartOffset) || isNaN(newEndOffset))) {
                    debug('pteExpandToWord: Expanding to focused word');
                    Transforms.setSelection(editor, {
                        anchor: __assign(__assign({}, selection.anchor), { offset: newStartOffset }),
                        focus: __assign(__assign({}, selection.focus), { offset: newEndOffset }),
                    });
                    return;
                }
                debug("pteExpandToWord: Can't expand to word here");
            }
        };
        return editor;
    };
}
//# sourceMappingURL=createWithUtils.js.map