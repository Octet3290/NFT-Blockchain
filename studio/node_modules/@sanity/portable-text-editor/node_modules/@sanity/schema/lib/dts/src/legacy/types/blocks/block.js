var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { pick } from 'lodash';
import { lazyGetter } from '../utils';
import createPreviewGetter from '../../preview/createPreviewGetter';
import { BLOCK_STYLES, DEFAULT_BLOCK_STYLES, DEFAULT_LINK_ANNOTATION, DEFAULT_LIST_TYPES, DEFAULT_MARKS_FIELD, DEFAULT_TEXT_FIELD, DEFAULT_DECORATORS, } from './defaults';
var INHERITED_FIELDS = [
    'type',
    'name',
    'title',
    'jsonType',
    'description',
    'options',
    'fieldsets',
    'icon',
];
var BLOCK_CORE = {
    name: 'block',
    title: 'Block',
    type: null,
    jsonType: 'object',
};
var DEFAULT_OPTIONS = {};
export var BlockType = {
    get: function () {
        return BLOCK_CORE;
    },
    extend: function (subTypeDef, extendMember) {
        var options = __assign({}, (subTypeDef.options || DEFAULT_OPTIONS));
        var marks = subTypeDef.marks, styles = subTypeDef.styles, lists = subTypeDef.lists, of = subTypeDef.of, rest = __rest(subTypeDef, ["marks", "styles", "lists", "of"]);
        var childrenField = createChildrenField(marks, of);
        var styleField = createStyleField(styles);
        var listField = createListField(lists);
        var markDefsField = {
            name: 'markDefs',
            title: 'Mark definitions',
            type: 'array',
            of: (marks === null || marks === void 0 ? void 0 : marks.annotations) || DEFAULT_ANNOTATIONS,
        };
        // NOTE: if you update this (EVEN THE ORDER OF FIELDS) you _NEED TO_ also
        // update `BlockSchemaType`, `isBlockSchemaType` and similar in `@sanity/types`
        var fields = [childrenField, styleField, listField, markDefsField].concat(subTypeDef.fields || []);
        var parsed = Object.assign(pick(BLOCK_CORE, INHERITED_FIELDS), rest, {
            type: BLOCK_CORE,
            options: options,
        });
        lazyGetter(parsed, 'fields', function () {
            return fields.map(function (fieldDef) {
                var name = fieldDef.name, type = __rest(fieldDef, ["name"]);
                return {
                    name: name,
                    type: extendMember(type),
                };
            });
        });
        lazyGetter(parsed, 'preview', createPreviewGetter(subTypeDef));
        return subtype(parsed);
        function subtype(parent) {
            return {
                get: function () {
                    return parent;
                },
                extend: function (extensionDef) {
                    if (extensionDef.fields) {
                        throw new Error('Cannot override `fields` of subtypes of "block"');
                    }
                    var current = Object.assign({}, parent, pick(extensionDef, INHERITED_FIELDS), {
                        type: parent,
                    });
                    return subtype(current);
                },
            };
        }
    },
};
function ensureNormalStyle(styles) {
    return styles.some(function (style) { return style.value === 'normal'; })
        ? styles
        : __spreadArray([BLOCK_STYLES.normal], __read(styles), false);
}
function createStyleField(styles) {
    return {
        name: 'style',
        title: 'Style',
        type: 'string',
        options: {
            list: ensureNormalStyle(styles || DEFAULT_BLOCK_STYLES),
        },
    };
}
function createListField(lists) {
    return {
        name: 'list',
        title: 'List type',
        type: 'string',
        options: {
            list: lists || DEFAULT_LIST_TYPES,
        },
    };
}
var DEFAULT_ANNOTATIONS = [DEFAULT_LINK_ANNOTATION];
function createChildrenField(marks, of) {
    if (of === void 0) { of = []; }
    return {
        name: 'children',
        title: 'Content',
        type: 'array',
        of: __spreadArray([
            {
                type: 'span',
                fields: [DEFAULT_TEXT_FIELD, DEFAULT_MARKS_FIELD],
                annotations: marks && marks.annotations ? marks.annotations : DEFAULT_ANNOTATIONS,
                decorators: marks && marks.decorators ? marks.decorators : DEFAULT_DECORATORS,
            }
        ], __read(of.filter(function (memberType) { return memberType.type !== 'span'; })), false),
    };
}
//# sourceMappingURL=block.js.map