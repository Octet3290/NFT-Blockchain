var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { pick } from 'lodash';
import { lazyGetter } from '../utils';
import createPreviewGetter from '../../preview/createPreviewGetter';
var INHERITED_FIELDS = [
    'type',
    'name',
    'title',
    'jsonType',
    'description',
    'options',
    'fieldsets',
    'icon',
];
var SPAN_CORE = {
    name: 'span',
    title: 'Span',
    type: null,
    jsonType: 'object',
};
var MARKS_FIELD = {
    name: 'marks',
    title: 'Marks',
    type: 'array',
    of: [{ type: 'string' }],
};
var TEXT_FIELD = {
    name: 'text',
    title: 'Text',
    type: 'string',
};
var DEFAULT_OPTIONS = {};
export var SpanType = {
    get: function () {
        return SPAN_CORE;
    },
    extend: function (subTypeDef, extendMember) {
        var options = __assign({}, (subTypeDef.options || DEFAULT_OPTIONS));
        var _a = subTypeDef.annotations, annotations = _a === void 0 ? [] : _a, _b = subTypeDef.marks, marks = _b === void 0 ? [] : _b;
        // NOTE: if you update this please also update `SpanSchemaType` in`@sanity/types`
        var fields = [MARKS_FIELD, TEXT_FIELD];
        var parsed = Object.assign(pick(SPAN_CORE, INHERITED_FIELDS), subTypeDef, {
            type: SPAN_CORE,
            options: options,
        });
        lazyGetter(parsed, 'fields', function () {
            return fields.map(function (fieldDef) {
                var name = fieldDef.name, type = __rest(fieldDef, ["name"]);
                return {
                    name: name,
                    type: extendMember(type),
                };
            });
        });
        lazyGetter(parsed, 'annotations', function () { return annotations.map(extendMember); });
        lazyGetter(parsed, 'marks', function () { return marks.map(extendMember); });
        lazyGetter(parsed, 'preview', createPreviewGetter(subTypeDef));
        return subtype(parsed);
        function subtype(parent) {
            return {
                get: function () {
                    return parent;
                },
                extend: function (extensionDef) {
                    if (extensionDef.fields) {
                        throw new Error('Cannot override `fields` of subtypes of "span"');
                    }
                    var current = Object.assign({}, parent, pick(extensionDef, INHERITED_FIELDS), {
                        type: parent,
                    });
                    return subtype(current);
                },
            };
        }
    },
};
//# sourceMappingURL=span.js.map