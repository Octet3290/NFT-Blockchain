"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_LIMIT = void 0;
exports.createSearchQuery = createSearchQuery;

var _uniq2 = _interopRequireDefault(require("lodash/uniq"));

var _union2 = _interopRequireDefault(require("lodash/union"));

var _toLower2 = _interopRequireDefault(require("lodash/toLower"));

var _flow2 = _interopRequireDefault(require("lodash/flow"));

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _compact2 = _interopRequireDefault(require("lodash/compact"));

var _searchUtils = require("../../util/searchUtils");

var _tokenize = require("../common/tokenize");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DEFAULT_LIMIT = 1000;
exports.DEFAULT_LIMIT = DEFAULT_LIMIT;
var combinePaths = (0, _flow2.default)([_flatten2.default, _union2.default, _compact2.default]);

function createSearchSpec(types, optimizeIndexedPaths) {
  var hasIndexedPaths = false;
  var spec = types.map(type => ({
    typeName: type.name,
    paths: type.__experimental_search.map(config => {
      var path = config.path.map(p => {
        if (typeof p === 'number') {
          hasIndexedPaths = true; // putting [number] in the first filter of a query makes the whole query unoptimized by content-lake,
          // killing performance
          // as a workaround we translate numbers to array syntax so we at least get some hits with decent performance for now

          if (optimizeIndexedPaths) {
            return [];
          }
        }

        return p;
      });
      return {
        weight: config.weight,
        path: (0, _searchUtils.joinPath)(path),
        mapWith: config.mapWith
      };
    })
  }));
  return {
    spec,
    hasIndexedPaths
  };
}

var pathWithMapper = _ref => {
  var mapWith = _ref.mapWith,
      path = _ref.path;
  return mapWith ? "".concat(mapWith, "(").concat(path, ")") : path;
};

function createSearchQuery(searchTerms) {
  var _searchTerms$offset, _ref2, _searchTerms$limit;

  var searchOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var filter = searchOpts.filter,
      params = searchOpts.params,
      tag = searchOpts.tag;

  var _createSearchSpec = createSearchSpec(searchTerms.types, false),
      exactSearchSpec = _createSearchSpec.spec,
      hasIndexedPaths = _createSearchSpec.hasIndexedPaths;

  var terms = (0, _uniq2.default)((0, _compact2.default)((0, _tokenize.tokenize)((0, _toLower2.default)(searchTerms.query))));

  function createConstraints(spec) {
    var combinedSearchPaths = combinePaths(spec.map(configForType => configForType.paths.map(opt => pathWithMapper(opt))));
    var constraints = terms.map((term, i) => combinedSearchPaths.map(joinedPath => "".concat(joinedPath, " match $t").concat(i))).filter(constraint => constraint.length > 0);
    return constraints.map(constraint => "(".concat(constraint.join(' || '), ")"));
  }

  var optimizedSpec = hasIndexedPaths ? createSearchSpec(searchTerms.types, true).spec : exactSearchSpec;
  var filters = ['_type in $__types', searchOpts.includeDrafts === false && "!(_id in path('drafts.**'))", ...createConstraints(optimizedSpec), filter ? "(".concat(filter, ")") : ''].filter(Boolean);
  var selections = exactSearchSpec.map(spec => {
    var constraint = "_type == \"".concat(spec.typeName, "\" => ");
    var selection = "{ ".concat(spec.paths.map((cfg, i) => "\"w".concat(i, "\": ").concat(pathWithMapper(cfg))), " }");
    return "".concat(constraint).concat(selection);
  });
  var selection = selections.length > 0 ? "...select(".concat(selections.join(',\n'), ")") : '';
  var query = "*[".concat(filters.join(' && '), "]") + "[$__offset...$__limit]" + // the following would improve search quality for paths-with-numbers, but increases the size of the query by up to 50%
  // `${hasIndexedPaths ? `[${createConstraints(exactSearchSpec).join(' && ')}]` : ''}` +
  "{_type, _id, ".concat(selection, "}");
  var offset = (_searchTerms$offset = searchTerms.offset) !== null && _searchTerms$offset !== void 0 ? _searchTerms$offset : 0;
  var limit = ((_ref2 = (_searchTerms$limit = searchTerms.limit) !== null && _searchTerms$limit !== void 0 ? _searchTerms$limit : searchOpts.limit) !== null && _ref2 !== void 0 ? _ref2 : DEFAULT_LIMIT) + offset;
  return {
    query,
    params: _objectSpread(_objectSpread({}, toGroqParams(terms)), {}, {
      __types: exactSearchSpec.map(spec => spec.typeName),
      __limit: limit,
      __offset: offset
    }, params || {}),
    options: {
      tag
    },
    searchSpec: exactSearchSpec,
    terms
  };
}

var toGroqParams = terms => {
  var params = {};
  return terms.reduce((acc, term, i) => {
    acc["t".concat(i)] = "".concat(term, "*"); // "t" is short for term

    return acc;
  }, params);
};