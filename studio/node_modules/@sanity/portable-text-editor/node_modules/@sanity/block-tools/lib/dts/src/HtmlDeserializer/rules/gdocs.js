var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { BLOCK_DEFAULT_STYLE, DEFAULT_BLOCK, DEFAULT_SPAN, HTML_BLOCK_TAGS, HTML_HEADER_TAGS, HTML_LIST_CONTAINER_TAGS, } from '../../constants';
import { isElement, tagName } from '../helpers';
var LIST_CONTAINER_TAGS = Object.keys(HTML_LIST_CONTAINER_TAGS);
// font-style:italic seems like the most important rule for italic / emphasis in their html
function isEmphasis(el) {
    var style = isElement(el) && el.getAttribute('style');
    return /font-style:italic/.test(style || '');
}
// font-weight:700 seems like the most important rule for bold in their html
function isStrong(el) {
    var style = isElement(el) && el.getAttribute('style');
    return /font-weight:700/.test(style || '');
}
// Check for attribute given by the gdocs preprocessor
function isGoogleDocs(el) {
    return isElement(el) && Boolean(el.getAttribute('data-is-google-docs'));
}
function getListItemStyle(el) {
    var parentTag = tagName(el.parentNode);
    if (parentTag && !LIST_CONTAINER_TAGS.includes(parentTag)) {
        return undefined;
    }
    return tagName(el.parentNode) === 'ul' ? 'bullet' : 'number';
}
function getListItemLevel(el) {
    var level = 0;
    if (tagName(el) === 'li') {
        var parentNode = el.parentNode;
        while (parentNode) {
            var parentTag = tagName(parentNode);
            if (parentTag && LIST_CONTAINER_TAGS.includes(parentTag)) {
                level++;
            }
            parentNode = parentNode.parentNode;
        }
    }
    else {
        level = 1;
    }
    return level;
}
var blocks = __assign(__assign({}, HTML_BLOCK_TAGS), HTML_HEADER_TAGS);
function getBlockStyle(el, enabledBlockStyles) {
    var childTag = tagName(el.firstChild);
    var block = childTag && blocks[childTag];
    if (!block) {
        return BLOCK_DEFAULT_STYLE;
    }
    if (!enabledBlockStyles.includes(block.style)) {
        return BLOCK_DEFAULT_STYLE;
    }
    return block.style;
}
export default function createGDocsRules(_blockContentType, options) {
    return [
        {
            deserialize: function (el) {
                if (isElement(el) && tagName(el) === 'span' && isGoogleDocs(el)) {
                    var span = __assign(__assign({}, DEFAULT_SPAN), { marks: [], text: el.innerText });
                    if (isStrong(el)) {
                        span.marks.push('strong');
                    }
                    if (isEmphasis(el)) {
                        span.marks.push('em');
                    }
                    return span;
                }
                return undefined;
            },
        },
        {
            deserialize: function (el, next) {
                var _a;
                if (tagName(el) === 'li' && isGoogleDocs(el)) {
                    return __assign(__assign({}, DEFAULT_BLOCK), { listItem: getListItemStyle(el), level: getListItemLevel(el), style: getBlockStyle(el, options.enabledBlockStyles), children: next(((_a = el.firstChild) === null || _a === void 0 ? void 0 : _a.childNodes) || []) });
                }
                return undefined;
            },
        },
    ];
}
//# sourceMappingURL=gdocs.js.map