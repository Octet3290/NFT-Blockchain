"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkoutPair = checkoutPair;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _versionedClient = require("../../../client/versionedClient");

var _getPairListener = require("../getPairListener");

var _createBufferedDocument = require("../buffered-doc/createBufferedDocument");

var _excluded = ["resultRev"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var isMutationEventForDocId = id => event => {
  return event.type !== 'reconnect' && event.type !== 'pending' && event.documentId === id;
};

function setVersion(version) {
  return ev => _objectSpread(_objectSpread({}, ev), {}, {
    version
  });
}

function commitMutations(mutationParams) {
  var resultRev = mutationParams.resultRev,
      mutation = _objectWithoutProperties(mutationParams, _excluded);

  return _versionedClient.versionedClient.dataRequest('mutate', mutation, {
    visibility: 'async',
    returnDocuments: false,
    tag: 'document.commit'
  });
}

function submitCommitRequest(request) {
  return (0, _rxjs.from)(commitMutations(request.mutation.params)).pipe((0, _operators.tap)({
    error: _error => {
      var isBadRequest = 'statusCode' in _error && typeof _error.statusCode === 'number' && _error.statusCode >= 400 && _error.statusCode <= 500;

      if (isBadRequest) {
        request.cancel(_error);
      } else {
        request.failure(_error);
      }
    },
    next: () => request.success()
  }));
}

function checkoutPair(idPair) {
  var publishedId = idPair.publishedId,
      draftId = idPair.draftId;
  var listenerEvents$ = (0, _getPairListener.getPairListener)(_versionedClient.versionedClient, idPair).pipe((0, _operators.share)());
  var reconnect$ = listenerEvents$.pipe((0, _operators.filter)(ev => ev.type === 'reconnect'));
  var draft = (0, _createBufferedDocument.createBufferedDocument)(draftId, listenerEvents$.pipe((0, _operators.filter)(isMutationEventForDocId(draftId))));
  var published = (0, _createBufferedDocument.createBufferedDocument)(publishedId, listenerEvents$.pipe((0, _operators.filter)(isMutationEventForDocId(publishedId)))); // share commit handling between draft and published

  var transactionsPendingEvents$ = listenerEvents$.pipe((0, _operators.filter)(ev => ev.type === 'pending'));
  var commits$ = (0, _rxjs.merge)(draft.commitRequest$, published.commitRequest$).pipe((0, _operators.mergeMap)(submitCommitRequest), (0, _operators.mergeMapTo)(_rxjs.EMPTY), (0, _operators.share)());
  return {
    transactionsPendingEvents$,
    draft: _objectSpread(_objectSpread({}, draft), {}, {
      events: (0, _rxjs.merge)(commits$, reconnect$, draft.events).pipe((0, _operators.map)(setVersion('draft'))),
      consistency$: draft.consistency$,
      remoteSnapshot$: draft.remoteSnapshot$.pipe((0, _operators.map)(setVersion('draft')))
    }),
    published: _objectSpread(_objectSpread({}, published), {}, {
      events: (0, _rxjs.merge)(commits$, reconnect$, published.events).pipe((0, _operators.map)(setVersion('published'))),
      consistency$: published.consistency$,
      remoteSnapshot$: published.remoteSnapshot$.pipe((0, _operators.map)(setVersion('published')))
    })
  };
}