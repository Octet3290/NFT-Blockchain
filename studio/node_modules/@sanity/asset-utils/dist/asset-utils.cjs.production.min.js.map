{"version":3,"file":"asset-utils.cjs.production.min.js","sources":["../src/hotspotCrop.ts","../src/utils.ts","../src/constants.ts","../src/asserters.ts","../src/paths.ts","../src/parse.ts","../src/resolve.ts","../src/urls.ts"],"sourcesContent":["import type {SanityImageCrop, SanityImageHotspot} from './types'\n\n/**\n * Default crop (equals to \"whole image\")\n */\nexport const DEFAULT_CROP: Readonly<SanityImageCrop> = Object.freeze({\n  left: 0,\n  top: 0,\n  bottom: 0,\n  right: 0,\n})\n\n/**\n * Default hotspot (equals to horizontal/vertical center, full size of image)\n */\nexport const DEFAULT_HOTSPOT: Readonly<SanityImageHotspot> = Object.freeze({\n  x: 0.5,\n  y: 0.5,\n  height: 1,\n  width: 1,\n})\n\n/**\n * Returns cloned version of the default crop (prevents accidental mutations)\n *\n * @returns Default image crop object\n */\nexport const getDefaultCrop = (): SanityImageCrop => ({...DEFAULT_CROP})\n\n/**\n * Returns cloned version of the default hotspot (prevents accidental mutations)\n *\n * @returns Default image hotspot object\n */\nexport const getDefaultHotspot = (): SanityImageHotspot => ({...DEFAULT_HOTSPOT})\n\n/**\n * Returns whether or not the passed crop has the default values for a crop region\n *\n * @param crop The crop to return whether or not is the default crop\n * @returns True if passed crop matches default, false otherwise\n */\nexport const isDefaultCrop = (crop: SanityImageCrop): boolean => {\n  const {top, bottom, left, right} = crop\n  const {\n    top: defaultTop,\n    bottom: defaultBottom,\n    left: defaultLeft,\n    right: defaultRight,\n  } = DEFAULT_CROP\n\n  return (\n    top === defaultTop && bottom === defaultBottom && left === defaultLeft && right === defaultRight\n  )\n}\n\n/**\n * Returns whether or not the passed hotspot has the default values for a hotspot region\n *\n * @param hotspot The hotspot to return whether or not is the default hotspot\n * @returns True if passed hotspot matches default, false otherwise\n */\nexport const isDefaultHotspot = (hotspot: SanityImageHotspot): boolean => {\n  const {x, y, width, height} = hotspot\n  const {x: defaultX, y: defaultY, width: defaultWidth, height: defaultHeight} = DEFAULT_HOTSPOT\n\n  return x === defaultX && y === defaultY && width === defaultWidth && height === defaultHeight\n}\n","/**\n * @internal\n */\nexport type MethodReturnType<T> = T extends (...args: unknown[]) => infer R ? R : any // eslint-disable-line @typescript-eslint/no-explicit-any\n\n/**\n * @internal\n */\nexport type ArgumentTypes<F extends Function> = F extends (...args: infer A) => unknown ? A : never\n\n/**\n * Error type thrown when the library fails to resolve a value, such as an asset ID,\n * filename or project ID/dataset information.\n *\n * The `input` property holds the value passed as the input, which failed to be\n * resolved to something meaningful.\n */\nexport class UnresolvableError extends Error {\n  unresolvable = true\n\n  // The input may not be a valid source, so let's not type it as one\n  input?: unknown\n\n  constructor(inputSource: unknown, message = 'Failed to resolve asset ID from source') {\n    super(message)\n    this.input = inputSource\n  }\n}\n\n/**\n * Checks whether or not an error instance is of type UnresolvableError\n *\n * @param err - Error to check for unresolvable error type\n * @returns True if the passed error instance appears to be an unresolveable error\n */\nexport function isUnresolvableError(err: unknown): err is UnresolvableError {\n  const error = err as UnresolvableError\n  return Boolean(error.unresolvable && 'input' in error)\n}\n\n/**\n * Returns a getter which returns `undefined` instead of throwing,\n * if encountering an `UnresolvableError`\n *\n * @param method - Function to use as resolver\n * @returns Function that returns `undefined` if passed resolver throws UnresolvableError\n * @internal\n */\nexport function getForgivingResolver<T extends Function>(method: T) {\n  return function (...args: ArgumentTypes<T>): MethodReturnType<T> | undefined {\n    try {\n      return method(...args)\n    } catch (err) {\n      if (isUnresolvableError(err)) {\n        return undefined\n      }\n\n      throw err\n    }\n  }\n}\n","/**\n * @internal\n */\nexport const cdnUrl = 'https://cdn.sanity.io'\n\n/**\n * @internal\n */\nexport const fileAssetFilenamePattern = /^([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+\\.[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const fileAssetIdPattern = /^file-([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+-[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const imageAssetFilenamePattern = /^([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})-\\d+x\\d+\\.[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const imageAssetIdPattern = /^image-([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+-\\d+x\\d+-[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const assetFilenamePattern =\n  /^(([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+|([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+-\\d+x\\d+\\.[a-z0-9]+)$/\n\n/**\n * @internal\n */\nexport const pathPattern = /^(images|files)\\/([a-z0-9]+)\\/([a-z0-9][-\\w]*)\\//\n\n/**\n * @internal\n */\nexport const idPattern =\n  /^(?:image-(?:[a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+-\\d+x\\d+-[a-z0-9]+|file-(?:[a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+-[a-z0-9]+)$/\n\n/**\n * For use in cases where the project and dataset doesn't really matter\n *\n * @internal\n */\nexport const dummyProject = {projectId: 'a', dataset: 'b'}\n","import {fileAssetIdPattern, imageAssetIdPattern} from './constants'\nimport type {\n  SanityAssetIdStub,\n  SanityAssetObjectStub,\n  SanityAssetPathStub,\n  SanityAssetUrlStub,\n  SanityFileAsset,\n  SanityImageAsset,\n  SanityReference,\n} from './types'\n\n/**\n * Checks whether or not the given source is a Sanity reference\n * (an object containing _ref string key)\n *\n * @param ref - Possible reference\n * @returns Whether or not the passed object is a reference\n */\nexport function isReference(ref: unknown): ref is SanityReference {\n  return isObject(ref) && typeof (ref as SanityReference)._ref === 'string'\n}\n\n/**\n * Checks whether or not the given source is an asset ID stub\n * (an object containing an `_id` property)\n *\n * @param stub - Possible asset id stub\n * @returns Whether or not the passed object is an object id stub\n */\nexport function isAssetIdStub(stub: unknown): stub is SanityAssetIdStub {\n  return isObject(stub) && typeof (stub as SanityAssetIdStub)._id === 'string'\n}\n\n/**\n * Checks whether or not the given source is an asset path stub\n * (an object containing a `path` property)\n *\n * @param stub - Possible asset path stub\n * @returns Whether or not the passed object is an object path stub\n */\nexport function isAssetPathStub(stub: unknown): stub is SanityAssetPathStub {\n  return isObject(stub) && typeof (stub as SanityAssetPathStub).path === 'string'\n}\n\n/**\n * Checks whether or not the given source is an asset URL stub\n * (an object containing a `url` property)\n *\n * @param stub - Possible asset url stub\n * @returns Whether or not the passed object is an object url stub\n */\nexport function isAssetUrlStub(stub: unknown): stub is SanityAssetUrlStub {\n  return isObject(stub) && typeof (stub as SanityAssetUrlStub).url === 'string'\n}\n\n/**\n * Checks whether or not the given source is a (partial) sanity file asset document.\n * Only checks the `_type` property, all other properties _may_ be missing\n *\n * @param src - Source to check\n * @returns Whether or not the given source is a file asset\n */\nexport function isSanityFileAsset(src: unknown): src is SanityFileAsset {\n  return isObject(src) && (src as SanityFileAsset)._type === 'sanity.fileAsset'\n}\n\n/**\n * Checks whether or not the given source is a (partial) sanity image asset document.\n * Only checks the `_type` property, all other properties _may_ be missing\n *\n * @param src - Source to check\n * @returns Whether or not the given source is a file asset\n */\nexport function isSanityImageAsset(src: unknown): src is SanityImageAsset {\n  return isObject(src) && (src as SanityImageAsset)._type === 'sanity.imageAsset'\n}\n\n/**\n * Checks whether or not the given document ID is a valid Sanity image asset document ID\n *\n * @param documentId - Document ID to check\n * @returns Whether or not the given document ID is a Sanity image asset document ID\n */\nexport function isImageAssetId(documentId: string): boolean {\n  return imageAssetIdPattern.test(documentId)\n}\n\n/**\n * Checks whether or not the given document ID is a valid Sanity file asset document ID\n *\n * @param documentId - Document ID to check\n * @returns Whether or not the given document ID is a Sanity file asset document ID\n */\nexport function isFileAssetId(documentId: string): boolean {\n  return fileAssetIdPattern.test(documentId)\n}\n\n/**\n * Checks whether or not the given document ID is a valid Sanity asset document ID (file or image)\n *\n * @param documentId - Document ID to check\n * @returns Whether or not the given document ID is a Sanity asset document ID (file or image)\n */\nexport function isAssetId(documentId: string): boolean {\n  return isImageAssetId(documentId) || isFileAssetId(documentId)\n}\n\n/**\n * Checks whether or not the given source is an asset object stub\n *\n * @param stub - Possible asset object stub\n * @returns Whether or not the passed object is an object stub\n */\nexport function isAssetObjectStub(stub: unknown): stub is SanityAssetObjectStub {\n  const item = stub as SanityAssetObjectStub\n  return isObject(item) && item.asset && typeof item.asset === 'object'\n}\n\n/**\n * Checks whether or not the passed object is an object (and not `null`)\n *\n * @param obj Item to check whether or not is an object\n * @returns Whether or not `obj` is an object\n * @internal\n */\nexport function isObject(obj: unknown): obj is object {\n  return obj !== null && !Array.isArray(obj) && typeof obj === 'object'\n}\n","import type {\n  FileUrlBuilderOptions,\n  ImageUrlBuilderOptions,\n  PathBuilderOptions,\n  SanityAssetSource,\n  SanityFileUrlParts,\n  SanityImageUrlParts,\n} from './types'\nimport {pathPattern, fileAssetFilenamePattern, imageAssetFilenamePattern, cdnUrl} from './constants'\nimport {isAssetObjectStub, isAssetPathStub, isAssetUrlStub, isReference} from './asserters'\nimport {getForgivingResolver, UnresolvableError} from './utils'\n\n/**\n * Builds the base image path from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID, dimensions and extension\n * @param options - Project ID and dataset the image belongs to, along with other options\n * @return string\n */\nexport function buildImagePath(\n  asset: ImageUrlBuilderOptions | SanityImageUrlParts,\n  options?: PathBuilderOptions\n): string {\n  const projectId = options?.projectId || asset.projectId\n  const dataset = options?.dataset || asset.dataset\n  if (!projectId || !dataset) {\n    throw new Error('Project details (projectId and dataset) required to resolve path for image')\n  }\n\n  const dimensions =\n    'metadata' in asset ? asset.metadata.dimensions : {width: asset.width, height: asset.height}\n  const originalFilename = 'originalFilename' in asset ? asset.originalFilename : undefined\n  const {assetId, extension, vanityFilename} = asset\n  const {width, height} = dimensions\n  const vanity = getVanityStub(originalFilename, vanityFilename, options)\n\n  return `images/${projectId}/${dataset}/${assetId}-${width}x${height}.${extension}${vanity}`\n}\n\n/**\n * Builds the base image URL from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID, dimensions and extension\n * @param options - Project ID and dataset the image belongs to\n * @return string\n */\nexport function buildImageUrl(\n  asset: ImageUrlBuilderOptions | SanityImageUrlParts,\n  options?: PathBuilderOptions\n): string {\n  return `${cdnUrl}/${buildImagePath(asset, options)}`\n}\n\n/**\n * Builds the base file path from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID, dimensions and extension\n * @param options - Project ID and dataset the file belongs to, along with other options\n * @return string\n */\nexport function buildFilePath(\n  asset: FileUrlBuilderOptions | SanityFileUrlParts,\n  options?: PathBuilderOptions\n): string {\n  const projectId = options?.projectId || asset.projectId\n  const dataset = options?.dataset || asset.dataset\n  if (!projectId || !dataset) {\n    throw new Error('Project details (projectId and dataset) required to resolve path for file')\n  }\n\n  const originalFilename = 'originalFilename' in asset ? asset.originalFilename : undefined\n  const {assetId, extension, vanityFilename} = asset\n  const vanity = getVanityStub(originalFilename, vanityFilename, options)\n\n  return `files/${projectId}/${dataset}/${assetId}.${extension}${vanity}`\n}\n\n/**\n * Builds the base file URL from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID and extension\n * @param options - Project ID and dataset the file belongs to, along with other options\n * @return string\n */\nexport function buildFileUrl(asset: FileUrlBuilderOptions, project?: PathBuilderOptions): string {\n  return `${cdnUrl}/${buildFilePath(asset, project)}`\n}\n\n/**\n * Checks whether or not the given URL contains an asset path\n *\n * @param url - URL or path name\n * @returns Whether or not it contained an asset path\n */\nfunction hasPath(urlOrPath: string): boolean {\n  return pathPattern.test(tryGetUrlPath(urlOrPath) || '')\n}\n\n/**\n * Tries to get the asset path from a given asset source\n *\n * @param src - The source image to infer an asset path from\n * @returns A path if resolvable, undefined otherwise\n */\nexport function tryGetAssetPath(src: SanityAssetSource): string | undefined {\n  if (isAssetObjectStub(src)) {\n    return tryGetAssetPath(src.asset)\n  }\n\n  if (isReference(src)) {\n    return undefined\n  }\n\n  if (typeof src === 'string') {\n    return hasPath(src) ? getUrlPath(src) : undefined\n  }\n\n  if (isAssetPathStub(src)) {\n    return src.path\n  }\n\n  if (isAssetUrlStub(src)) {\n    return getUrlPath(src.url)\n  }\n\n  return undefined\n}\n\n/**\n * Strips the CDN URL and query params from a URL, eg:\n * `https://cdn.sanity.io/images/project/dataset/filename-200x200.jpg?foo=bar` =>\n * `images/project/dataset/filename-200x200.jpg`\n *\n * @param url - URL to get path name from\n * @returns The path of a CDN URL\n * @throws If URL is not a valid Sanity asset URL\n */\nexport function getUrlPath(url: string): string {\n  if (pathPattern.test(url)) {\n    // Already just a path\n    return url\n  }\n\n  if (!url.startsWith(`${cdnUrl}/`)) {\n    throw new UnresolvableError(`Failed to resolve path from URL \"${url}\"`)\n  }\n\n  const qsPos = url.indexOf('?')\n  const toIndex = qsPos === -1 ? undefined : qsPos\n  return url.slice(cdnUrl.length + 1, toIndex)\n}\n\n/**\n * See {@link getUrlPath}\n *\n * @inheritFrom {@link getUrlPath}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetUrlPath = getForgivingResolver(getUrlPath)\n\n/**\n * Strips the CDN URL, path and query params from a URL, eg:\n * `https://cdn.sanity.io/images/project/dataset/filename-200x200.jpg?foo=bar` =>\n * `filename-200x200.jpg`\n *\n * @param url - URL to get filename from\n * @returns The filename of an URL, if URL matches the CDN URL\n * @throws If URL is not a valid Sanity asset URL\n */\nexport function getUrlFilename(url: string): string {\n  const path = tryGetUrlPath(url) || url\n  const filename = path.replace(/^(images|files)\\/[a-z0-9]+\\/[a-z0-9][-\\w]\\/*/, '')\n  if (!isValidFilename(filename)) {\n    throw new UnresolvableError(`Failed to resolve filename from URL \"${url}\"`)\n  }\n\n  return filename\n}\n\n/**\n * See {@link getUrlFilename}\n *\n * @inheritFrom {@link getUrlFilename}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetUrlFilename = getForgivingResolver(getUrlFilename)\n\n/**\n * Checks whether or not a given filename matches the expected Sanity asset filename pattern\n *\n * @param filename - Filename to check for validity\n * @returns Whether or not the specified filename is valid\n */\nexport function isValidFilename(filename: string): boolean {\n  return fileAssetFilenamePattern.test(filename) || imageAssetFilenamePattern.test(filename)\n}\n\n/**\n * Get the \"path stub\" at the end of the path, if the user hasn't explicitly opted out of this behavior\n */\nfunction getVanityStub(\n  originalFilename: string | undefined,\n  vanityFilename: string | undefined,\n  options?: PathBuilderOptions\n): string {\n  const vanity = vanityFilename || originalFilename\n  return options?.useVanityName === false || !vanity ? '' : `/${vanity}`\n}\n","import type {\n  SanityAssetIdParts,\n  SanityFileAssetIdParts,\n  SanityImageAssetIdParts,\n  SanityAssetUrlParts,\n  SanityFileUrlParts,\n  SanityImageUrlParts,\n} from './types'\nimport {\n  cdnUrl,\n  fileAssetIdPattern,\n  imageAssetFilenamePattern,\n  imageAssetIdPattern,\n  pathPattern,\n} from './constants'\nimport {tryGetUrlFilename, isValidFilename} from './paths'\n\n/**\n * @internal\n */\nconst exampleFileId = 'file-027401f31c3ac1e6d78c5d539ccd1beff72b9b11-pdf'\n\n/**\n * @internal\n */\nconst exampleImageId = 'image-027401f31c3ac1e6d78c5d539ccd1beff72b9b11-2000x3000-jpg'\n\n/**\n * Parses a Sanity asset document ID into individual parts (type, id, extension, width/height etc)\n *\n * @param documentId - Document ID to parse into named parts\n * @returns Object of named properties\n * @throws If document ID is invalid\n */\nexport function parseAssetId(documentId: string): SanityAssetIdParts {\n  if (imageAssetIdPattern.test(documentId)) {\n    return parseImageAssetId(documentId)\n  }\n\n  if (fileAssetIdPattern.test(documentId)) {\n    return parseFileAssetId(documentId)\n  }\n\n  throw new Error(`Invalid image/file asset ID: ${documentId}`)\n}\n\n/**\n * Parses a Sanity file asset document ID into individual parts (type, id, extension)\n *\n * @param documentId - File asset document ID to parse into named parts\n * @returns Object of named properties\n * @throws If document ID invalid\n */\nexport function parseFileAssetId(documentId: string): SanityFileAssetIdParts {\n  if (!fileAssetIdPattern.test(documentId)) {\n    throw new Error(\n      `Malformed file asset ID '${documentId}'. Expected an id like \"${exampleFileId}\"`\n    )\n  }\n\n  const [, assetId, extension] = documentId.split('-')\n  return {type: 'file', assetId, extension}\n}\n\n/**\n * Parses a Sanity image asset document ID into individual parts (type, id, extension, width, height)\n *\n * @param documentId - Image asset document ID to parse into named parts\n * @returns Object of named properties\n * @throws If document ID invalid\n */\nexport function parseImageAssetId(documentId: string): SanityImageAssetIdParts {\n  const [, assetId, dimensionString, extension] = documentId.split('-')\n  const [width, height] = (dimensionString || '').split('x').map(Number)\n\n  if (!assetId || !dimensionString || !extension || !(width > 0) || !(height > 0)) {\n    throw new Error(`Malformed asset ID '${documentId}'. Expected an id like \"${exampleImageId}\".`)\n  }\n\n  return {type: 'image', assetId, width, height, extension}\n}\n\n/**\n * Parses a Sanity asset filename into individual parts (type, id, extension, width, height)\n *\n * @param filename - Filename to parse into named parts\n * @returns Object of named properties\n * @throws If image/filename is invalid\n */\nexport function parseAssetFilename(filename: string): SanityAssetIdParts {\n  const file = tryGetUrlFilename(filename) || ''\n  if (!isValidFilename(file)) {\n    throw new Error(`Invalid image/file asset filename: ${filename}`)\n  }\n\n  try {\n    const type = imageAssetFilenamePattern.test(file) ? 'image' : 'file'\n    const assetId = file.replace(/\\.([a-z0-9+]+)$/i, '-$1')\n    return parseAssetId(`${type}-${assetId}`)\n  } catch (err) {\n    throw new Error(`Invalid image/file asset filename: ${filename}`)\n  }\n}\n\n/**\n * Parses a full Sanity asset URL into individual parts\n * (type, project ID, dataset, id, extension, width, height)\n *\n * @param url - Full URL to parse into named parts\n * @returns Object of named properties\n * @throws If URL is invalid or not a Sanity asset URL\n */\nexport function parseAssetUrl(url: string): SanityAssetUrlParts {\n  if (!url.startsWith(cdnUrl)) {\n    throw new Error(`URL is not a valid Sanity asset URL: ${url}`)\n  }\n\n  const path = url.slice(cdnUrl.length).replace(/^\\/+/, '')\n  const [projectPath, , projectId, dataset] = path.match(pathPattern) || []\n  if (!projectId || !dataset) {\n    throw new Error(`URL is not a valid Sanity asset URL: ${url}`)\n  }\n\n  const [filename, vanityFilename] = path.slice(projectPath.length).split('/')\n  const parsed = parseAssetFilename(filename)\n\n  return {\n    ...parsed,\n    projectId,\n    dataset,\n    vanityFilename,\n  }\n}\n\n/**\n * Parses a full Sanity image asset URL into individual parts\n * (type, project ID, dataset, id, extension, width, height)\n *\n * @param url - Full URL to parse into named parts\n * @returns Object of named properties\n * @throws If URL is invalid or not a Sanity image asset URL\n */\nexport function parseImageAssetUrl(url: string): SanityImageUrlParts {\n  const parsed = parseAssetUrl(url)\n  if (parsed.type !== 'image') {\n    throw new Error(`URL is not a valid Sanity image asset URL: ${url}`)\n  }\n\n  return parsed\n}\n\n/**\n * Parses a full Sanity file asset URL into individual parts\n * (type, project ID, dataset, id, extension, width, height)\n *\n * @param url - Full URL to parse into named parts\n * @returns Object of named properties\n * @throws If URL is invalid or not a Sanity file asset URL\n */\nexport function parseFileAssetUrl(url: string): SanityFileUrlParts {\n  const parsed = parseAssetUrl(url)\n  if (parsed.type !== 'file') {\n    throw new Error(`URL is not a valid Sanity file asset URL: ${url}`)\n  }\n\n  return parsed\n}\n\n/**\n * Validates that a given URL is a Sanity asset URL, and returns the asset type if valid.\n *\n * @param url URL to extract asset type from\n * @returns Asset type if valid URL, false otherwise\n * @internal\n */\nexport function getAssetUrlType(url: string): 'image' | 'file' | false {\n  try {\n    return parseAssetUrl(url).type\n  } catch (err) {\n    return false\n  }\n}\n","import type {\n  PathBuilderOptions,\n  ResolvedSanityFile,\n  ResolvedSanityImage,\n  SanityAssetSource,\n  SanityFileAsset,\n  SanityFileObjectStub,\n  SanityFileSource,\n  SanityImageAsset,\n  SanityImageDimensions,\n  SanityImageObjectStub,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport {getDefaultCrop, getDefaultHotspot} from './hotspotCrop'\nimport {getForgivingResolver, UnresolvableError} from './utils'\nimport {parseImageAssetId, parseFileAssetId} from './parse'\nimport {\n  isAssetIdStub,\n  isAssetObjectStub,\n  isAssetPathStub,\n  isAssetUrlStub,\n  isReference,\n  isSanityFileAsset,\n  isSanityImageAsset,\n} from './asserters'\nimport {\n  cdnUrl,\n  dummyProject,\n  fileAssetFilenamePattern,\n  idPattern,\n  imageAssetFilenamePattern,\n  pathPattern,\n} from './constants'\nimport {\n  buildFilePath,\n  buildFileUrl,\n  buildImagePath,\n  buildImageUrl,\n  getUrlPath,\n  tryGetAssetPath,\n} from './paths'\n\n/**\n * Returns the width, height and aspect ratio of a passed image asset, from any\n * inferrable structure (id, url, path, asset document, image object etc)\n *\n * @param src - Input source (image object, asset, reference, id, url, path)\n * @returns Object with width, height and aspect ratio properties\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getImageDimensions(src: SanityImageSource): SanityImageDimensions {\n  const imageId = getAssetDocumentId(src)\n  const {width, height} = parseImageAssetId(imageId)\n  const aspectRatio = width / height\n  return {width, height, aspectRatio}\n}\n\n/**\n * See {@link getImageDimensions}\n *\n * @inheritFrom {@link getImageDimensions}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetImageDimensions = getForgivingResolver(getImageDimensions)\n\n/**\n * Returns the file extension for a given asset\n *\n * @param src - Input source (file/image object, asset, reference, id, url, path)\n * @returns The file extension, if resolvable (no `.` included)\n *\n * @throws {@link UnresolvableError}\n * Throws if passed asset source could not be resolved to an asset ID\n */\nexport function getExtension(src: SanityAssetSource): string {\n  return isFileSource(src)\n    ? getFile(src, dummyProject).asset.extension\n    : getImage(src, dummyProject).asset.extension\n}\n\n/**\n * See {@link getExtension}\n *\n * @inheritFrom {@link getExtension}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetExtension = getForgivingResolver(getExtension)\n\n/**\n * Tries to resolve an image object with as much information as possible,\n * from any inferrable structure (id, url, path, image object etc)\n *\n * @param src - Input source (image object, asset, reference, id, url, path)\n * @param project Project ID and dataset the image belongs to\n * @returns Image object\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getImage(\n  src: SanityImageSource,\n  project?: SanityProjectDetails\n): ResolvedSanityImage {\n  const projectDetails = project || tryGetProject(src)\n  const asset = getImageAsset(src, projectDetails)\n\n  const img = src as SanityImageObjectStub\n  return {\n    asset,\n    crop: img.crop || getDefaultCrop(),\n    hotspot: img.hotspot || getDefaultHotspot(),\n  }\n}\n\n/**\n * See {@link getImage}\n *\n * @inheritFrom {@link getImage}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetImage = getForgivingResolver(getImage)\n\n/**\n * Tries to resolve a (partial) image asset document with as much information as possible,\n * from any inferrable structure (id, url, path, image object etc)\n *\n * @param src - Input source (image object, asset, reference, id, url, path)\n * @param project - Project ID and dataset the image belongs to\n * @returns Image asset document\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getImageAsset(\n  src: SanityImageSource,\n  project?: SanityProjectDetails\n): SanityImageAsset {\n  const projectDetails = project || getProject(src)\n  const pathOptions: PathBuilderOptions = {...projectDetails, useVanityName: false}\n\n  const _id = getAssetDocumentId(src)\n  const sourceObj = src as SanityImageObjectStub\n  const source = (sourceObj.asset || src) as SanityImageAsset\n  const metadata = source.metadata || {}\n  const {assetId, width, height, extension} = parseImageAssetId(_id)\n  const aspectRatio = width / height\n  const baseAsset: SanityImageAsset = {\n    ...(isSanityImageAsset(src) ? src : {}),\n    _id,\n    _type: 'sanity.imageAsset',\n    assetId,\n    extension,\n    metadata: {\n      ...metadata,\n      dimensions: {width, height, aspectRatio},\n    },\n\n    // Placeholders, overwritten below\n    url: '',\n    path: '',\n  }\n\n  return {\n    ...baseAsset,\n    path: buildImagePath(baseAsset, pathOptions),\n    url: buildImageUrl(baseAsset, pathOptions),\n  }\n}\n\n/**\n * See {@link getImageAsset}\n *\n * @inheritFrom {@link getImageAsset}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetImageAsset = getForgivingResolver(getImageAsset)\n\n/**\n * Tries to resolve an file object with as much information as possible,\n * from any inferrable structure (id, url, path, file object etc)\n *\n * @param src - Input source (file object, asset, reference, id, url, path)\n * @param project Project ID and dataset the file belongs to\n * @returns File object\n *\n * @throws {@link UnresolvableError}\n * Throws if passed file source could not be resolved to an asset ID\n */\nexport function getFile(src: SanityFileSource, project?: SanityProjectDetails): ResolvedSanityFile {\n  const projectDetails = project || tryGetProject(src)\n  const asset = getFileAsset(src, projectDetails)\n  return {asset}\n}\n\n/**\n * See {@link getFile}\n *\n * @inheritFrom {@link getFile}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetFile = getForgivingResolver(getFile)\n\n/**\n * Tries to resolve a (partial) file asset document with as much information as possible,\n * from any inferrable structure (id, url, path, file object etc)\n *\n * @param src - Input source (file object, asset, reference, id, url, path)\n * @param options - Project ID and dataset the file belongs to, along with other options\n * @returns File asset document\n *\n * @throws {@link UnresolvableError}\n * Throws if passed file source could not be resolved to an asset ID\n */\nexport function getFileAsset(src: SanityFileSource, options?: PathBuilderOptions): SanityFileAsset {\n  const projectDetails: PathBuilderOptions = {...(options || getProject(src)), useVanityName: false}\n\n  const _id = getAssetDocumentId(src)\n  const sourceObj = src as SanityFileObjectStub\n  const source = (sourceObj.asset || src) as SanityFileAsset\n  const {assetId, extension} = parseFileAssetId(_id)\n  const baseAsset: SanityFileAsset = {\n    ...(isSanityFileAsset(src) ? src : {}),\n    _id,\n    _type: 'sanity.fileAsset',\n    assetId,\n    extension,\n    metadata: source.metadata || {},\n\n    // Placeholders, overwritten below\n    url: '',\n    path: '',\n  }\n\n  return {\n    ...baseAsset,\n    path: buildFilePath(baseAsset, projectDetails),\n    url: buildFileUrl(baseAsset, projectDetails),\n  }\n}\n\n/**\n * See {@link getFileAsset}\n *\n * @inheritFrom {@link getFileAsset}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetFileAsset = getForgivingResolver(getFileAsset)\n\n/**\n * Tries to resolve the asset document ID from any inferrable structure\n *\n * @param src - Input source (image/file object, asset, reference, id, url, path)\n * @returns The asset document ID\n *\n * @throws {@link UnresolvableError}\n * Throws if passed asset source could not be resolved to an asset document ID\n */\nexport function getAssetDocumentId(src: unknown): string {\n  const source = isAssetObjectStub(src) ? src.asset : src\n\n  let id = ''\n  if (typeof source === 'string') {\n    id = getIdFromString(source)\n  } else if (isReference(source)) {\n    id = source._ref\n  } else if (isAssetIdStub(source)) {\n    id = source._id\n  } else if (isAssetPathStub(source)) {\n    id = idFromUrl(`${cdnUrl}/${source.path}`)\n  } else if (isAssetUrlStub(source)) {\n    id = idFromUrl(source.url)\n  }\n\n  const hasId = id && idPattern.test(id)\n  if (!hasId) {\n    throw new UnresolvableError(src)\n  }\n\n  return id\n}\n\n/**\n * See {@link getAssetDocumentId}\n *\n * @inheritFrom {@link getAssetDocumentId}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetAssetDocumentId = getForgivingResolver(getAssetDocumentId)\n\n/**\n * Tries to cooerce a string (ID, URL or path) to an image asset ID\n *\n * @param str - Input string (ID, URL or path)\n * @returns string\n *\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getIdFromString(str: string): string {\n  if (idPattern.test(str)) {\n    // Already an ID\n    return str\n  }\n\n  if (str.indexOf(`${cdnUrl}/images`) === 0 || str.indexOf(`${cdnUrl}/files`) === 0) {\n    // Full URL\n    return idFromUrl(str)\n  }\n\n  if (pathPattern.test(str)) {\n    // Path\n    return idFromUrl(`${cdnUrl}/${str}`)\n  }\n\n  if (isFileAssetFilename(str)) {\n    // Just a filename (projectId/dataset irrelevant: just need asset ID)\n    return idFromUrl(`${cdnUrl}/files/a/b/${str}`)\n  }\n\n  if (isImageAssetFilename(str)) {\n    // Just a filename (projectId/dataset irrelevant: just need asset ID)\n    return idFromUrl(`${cdnUrl}/images/a/b/${str}`)\n  }\n\n  throw new UnresolvableError(str)\n}\n\n/**\n * See {@link getIdFromString}\n *\n * @inheritFrom {@link getIdFromString}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetIdFromString = getForgivingResolver(getIdFromString)\n\n/**\n * Converts from a full asset URL to just the asset document ID\n *\n * @param url - A full asset URL to convert\n * @returns string\n */\nfunction idFromUrl(url: string): string {\n  const path = getUrlPath(url)\n  const [type, , , fileName] = path.split('/')\n  const prefix = type.replace(/s$/, '')\n  return `${prefix}-${fileName.replace(/\\./g, '-')}`\n}\n\n/**\n * Resolves project ID and dataset the image belongs to, based on full URL or path\n * @param source - Image URL or path\n * @returns object | undefined\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getProject(src: SanityImageSource): SanityProjectDetails {\n  const path = tryGetAssetPath(src)\n  if (!path) {\n    throw new UnresolvableError(src, 'Failed to resolve project ID and dataset from source')\n  }\n\n  const [, , projectId, dataset] = path.match(pathPattern) || []\n  if (!projectId || !dataset) {\n    throw new UnresolvableError(src, 'Failed to resolve project ID and dataset from source')\n  }\n\n  return {projectId, dataset}\n}\n\n/**\n * See {@link getProject}\n *\n * @inheritFrom {@link getProject}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetProject = getForgivingResolver(getProject)\n\n/**\n * Returns whether or not the passed filename is a valid image asset filename\n *\n * @param filename - Filename to validate\n * @returns Whether or not the filename is an image asset filename\n */\nexport function isImageAssetFilename(filename: string): boolean {\n  return imageAssetFilenamePattern.test(filename)\n}\n\n/**\n * Returns whether or not the passed filename is a valid file asset filename\n *\n * @param filename - Filename to validate\n * @returns Whether or not the filename is a file asset filename\n */\nexport function isFileAssetFilename(filename: string): boolean {\n  return fileAssetFilenamePattern.test(filename)\n}\n\n/**\n * Returns whether or not the passed filename is a valid file or image asset filename\n *\n * @param filename - Filename to validate\n * @returns Whether or not the filename is an asset filename\n */\nexport function isAssetFilename(filename: string): boolean {\n  return isImageAssetFilename(filename) || isFileAssetFilename(filename)\n}\n\n/**\n * Return whether or not the passed source is a file source\n *\n * @param src - Source to check\n * @returns Whether or not the given source is a file source\n */\nexport function isFileSource(src: unknown): src is SanityFileSource {\n  const assetId = tryGetAssetDocumentId(src)\n  return assetId ? assetId.startsWith('file-') : false\n}\n\n/**\n * Return whether or not the passed source is an image source\n *\n * @param src - Source to check\n * @returns Whether or not the given source is an image source\n */\nexport function isImageSource(src: unknown): src is SanityImageSource {\n  const assetId = tryGetAssetDocumentId(src)\n  return assetId ? assetId.startsWith('image-') : false\n}\n","import {getAssetUrlType} from './parse'\n\n/**\n * Checks whether or not a given URL is a valid Sanity asset URL\n *\n * @param url URL to test\n * @returns True if url is a valid Sanity asset URL, false otherwise\n */\nexport function isSanityAssetUrl(url: string): boolean {\n  return getAssetUrlType(url) !== false\n}\n\n/**\n * Checks whether or not a given URL is a valid Sanity image asset URL\n *\n * @param url URL to test\n * @returns True if url is a valid Sanity image asset URL, false otherwise\n */\nexport function isSanityImageUrl(url: string): boolean {\n  return getAssetUrlType(url) === 'image'\n}\n\n/**\n * Checks whether or not a given URL is a valid Sanity file asset URL\n *\n * @param url URL to test\n * @returns True if url is a valid Sanity file asset URL, false otherwise\n */\nexport function isSanityFileUrl(url: string): boolean {\n  return getAssetUrlType(url) === 'file'\n}\n"],"names":["DEFAULT_CROP","Object","freeze","left","top","bottom","right","DEFAULT_HOTSPOT","x","y","height","width","getDefaultCrop","getDefaultHotspot","UnresolvableError","inputSource","message","_this","input","Error","isUnresolvableError","err","Boolean","unresolvable","getForgivingResolver","method","cdnUrl","fileAssetFilenamePattern","fileAssetIdPattern","imageAssetFilenamePattern","imageAssetIdPattern","pathPattern","idPattern","dummyProject","projectId","dataset","isReference","ref","isObject","_ref","isAssetIdStub","stub","_id","isAssetPathStub","path","isAssetUrlStub","url","isSanityFileAsset","src","_type","isSanityImageAsset","isImageAssetId","documentId","test","isFileAssetId","isAssetObjectStub","item","asset","obj","Array","isArray","buildImagePath","options","dimensions","metadata","assetId","extension","getVanityStub","originalFilename","undefined","vanityFilename","buildImageUrl","buildFilePath","buildFileUrl","project","tryGetAssetPath","tryGetUrlPath","getUrlPath","startsWith","qsPos","indexOf","slice","length","getUrlFilename","filename","replace","isValidFilename","tryGetUrlFilename","vanity","useVanityName","parseAssetId","parseImageAssetId","parseFileAssetId","split","type","dimensionString","map","Number","parseAssetFilename","file","parseAssetUrl","match","projectPath","getAssetUrlType","getImageDimensions","getAssetDocumentId","aspectRatio","tryGetImageDimensions","getExtension","isFileSource","getFile","getImage","tryGetExtension","img","getImageAsset","tryGetProject","crop","hotspot","tryGetImage","pathOptions","getProject","baseAsset","tryGetImageAsset","getFileAsset","tryGetFile","projectDetails","source","tryGetFileAsset","id","getIdFromString","idFromUrl","tryGetAssetDocumentId","str","isFileAssetFilename","isImageAssetFilename","tryGetIdFromString","fileName","parsed"],"mappings":"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"}