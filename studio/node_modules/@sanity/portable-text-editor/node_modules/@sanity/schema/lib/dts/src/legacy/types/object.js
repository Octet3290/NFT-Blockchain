var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { castArray, flatMap, keyBy, pick, startCase } from 'lodash';
import createPreviewGetter from '../preview/createPreviewGetter';
import guessOrderingConfig from '../ordering/guessOrderingConfig';
import { normalizeSearchConfigs } from '../searchConfig/normalize';
import resolveSearchConfig from '../searchConfig/resolve';
import { lazyGetter } from './utils';
import { DEFAULT_OVERRIDEABLE_FIELDS } from './constants';
var OVERRIDABLE_FIELDS = __spreadArray(__spreadArray([], __read(DEFAULT_OVERRIDEABLE_FIELDS), false), [
    'orderings',
    '__experimental_search',
    'blockEditor',
    'icon',
], false);
export var ObjectType = {
    get: function () {
        return {
            name: 'object',
            title: 'Object',
            type: null,
            jsonType: 'object',
        };
    },
    extend: function (rawSubTypeDef, createMemberType) {
        var subTypeDef = __assign({ fields: [] }, rawSubTypeDef);
        var options = __assign({}, (subTypeDef.options || {}));
        var parsed = Object.assign(pick(this.get(), OVERRIDABLE_FIELDS), subTypeDef, {
            type: this.get(),
            title: subTypeDef.title || (subTypeDef.name ? startCase(subTypeDef.name) : ''),
            options: options,
            orderings: subTypeDef.orderings || guessOrderingConfig(subTypeDef),
            fields: subTypeDef.fields.map(function (fieldDef) {
                var name = fieldDef.name, fieldset = fieldDef.fieldset, group = fieldDef.group, rest = __rest(fieldDef, ["name", "fieldset", "group"]);
                var compiledField = {
                    name: name,
                    group: group,
                    fieldset: fieldset,
                };
                return lazyGetter(compiledField, 'type', function () {
                    return createMemberType(__assign(__assign({}, rest), { title: fieldDef.title || startCase(name) }));
                });
            }),
        });
        lazyGetter(parsed, 'fieldsets', function () {
            return createFieldsets(subTypeDef, parsed.fields);
        });
        lazyGetter(parsed, 'groups', function () {
            return createFieldsGroups(subTypeDef, parsed.fields);
        });
        lazyGetter(parsed, 'preview', createPreviewGetter(subTypeDef));
        lazyGetter(parsed, '__experimental_search', function () {
            var userProvidedSearchConfig = subTypeDef.__experimental_search
                ? normalizeSearchConfigs(subTypeDef.__experimental_search)
                : null;
            if (userProvidedSearchConfig) {
                return userProvidedSearchConfig.map(function (entry) {
                    return entry === 'defaults' ? normalizeSearchConfigs(subTypeDef) : entry;
                });
            }
            return resolveSearchConfig(parsed);
        }, {
            enumerable: false,
        });
        return subtype(parsed);
        function subtype(parent) {
            return {
                get: function () {
                    return parent;
                },
                extend: function (extensionDef) {
                    if (extensionDef.fields) {
                        throw new Error('Cannot override `fields` of subtypes of "object"');
                    }
                    var current = Object.assign({}, parent, pick(extensionDef, OVERRIDABLE_FIELDS), {
                        title: extensionDef.title ||
                            subTypeDef.title ||
                            (subTypeDef.name ? startCase(subTypeDef.name) : ''),
                        type: parent,
                    });
                    lazyGetter(current, '__experimental_search', function () { return parent.__experimental_search; });
                    return subtype(current);
                },
            };
        }
    },
};
export function createFieldsets(typeDef, fields) {
    var fieldsetsDef = typeDef.fieldsets || [];
    var fieldsets = fieldsetsDef.map(function (fieldset) {
        var name = fieldset.name, title = fieldset.title, description = fieldset.description, options = fieldset.options, group = fieldset.group, hidden = fieldset.hidden, readOnly = fieldset.readOnly;
        return {
            name: name,
            title: title,
            description: description,
            options: options,
            group: group,
            fields: [],
            hidden: hidden,
            readOnly: readOnly,
        };
    });
    var fieldsetsByName = keyBy(fieldsets, 'name');
    return fields
        .map(function (field) {
        if (field.fieldset) {
            var fieldset = fieldsetsByName[field.fieldset];
            if (!fieldset) {
                throw new Error("Fieldset '".concat(field.fieldset, "' is not defined in schema for type '").concat(typeDef.name, "'"));
            }
            fieldset.fields.push(field);
            // Return the fieldset if its the first time we encounter a field in this fieldset
            return fieldset.fields.length === 1 ? fieldset : null;
        }
        return { single: true, field: field };
    })
        .filter(Boolean);
}
function createFieldsGroups(typeDef, fields) {
    var _a;
    var groupsDef = typeDef.groups || [];
    var groups = groupsDef.map(function (group) {
        var name = group.name, title = group.title, description = group.description, icon = group.icon, readOnly = group.readOnly, hidden = group.hidden;
        return {
            name: name,
            title: title,
            description: description,
            icon: icon,
            readOnly: readOnly,
            default: group.default,
            hidden: hidden,
            fields: [],
        };
    });
    var defaultGroups = groups.filter(function (group) { return group.default; });
    if (defaultGroups.length > 1) {
        // Throw if you have multiple default field groups defined
        throw new Error("You currently have ".concat(defaultGroups.length, " default field groups defined for type '").concat(typeDef.name ? startCase(typeDef.name) : (_a = typeDef.title) !== null && _a !== void 0 ? _a : "", "', but only 1 is supported"));
    }
    var groupsByName = keyBy(groups, 'name');
    fields.forEach(function (field) {
        if (field.group) {
            var fieldGroupNames = castArray(field.group);
            if (fieldGroupNames.length > 0) {
                fieldGroupNames.forEach(function (fieldGroupName) {
                    var _a, _b;
                    var currentGroup = groupsByName[fieldGroupName];
                    if (!currentGroup) {
                        throw new Error("Field group '".concat(fieldGroupName, "' is not defined in schema for type '").concat((_b = (_a = typeDef.name) !== null && _a !== void 0 ? _a : typeDef.title) !== null && _b !== void 0 ? _b : "", "'"));
                    }
                    currentGroup.fields.push(field);
                });
            }
        }
    });
    return flatMap(groupsByName).filter(function (group) { return group.fields.length > 0; });
}
//# sourceMappingURL=object.js.map