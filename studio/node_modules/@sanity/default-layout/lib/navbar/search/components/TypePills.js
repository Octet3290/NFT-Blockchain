"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypePills = TypePills;

var _components = require("@sanity/base/components");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _templateObject, _templateObject2;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var DEFAULT_AVAILABLE_CHARS = 40; // excluding "+x more" suffix

var PillCard = (0, _styledComponents.default)(_ui.Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  background: ", ";\n  flex-shrink: ", ";\n  overflow: hidden;\n"])), _ref => {
  var theme = _ref.theme;
  return theme.sanity.color.selectable.primary.enabled.code.bg;
}, _ref2 => {
  var $collapsible = _ref2.$collapsible;
  return $collapsible ? 1 : 0;
});
var RemainingCountBox = (0, _styledComponents.default)(_ui.Box)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  flex-shrink: 0;\n"])));

function TypePills(_ref3) {
  var _ref3$availableCharac = _ref3.availableCharacters,
      availableCharacters = _ref3$availableCharac === void 0 ? DEFAULT_AVAILABLE_CHARS : _ref3$availableCharac,
      types = _ref3.types;

  /**
   * Get the total number of visible document types whose titles fit within `availableCharacters` count.
   * The first document is always included, regardless of whether it fits within `availableCharacters` or not.
   */
  var visibleTypes = (0, _react.useMemo)(() => types.reduce(function () {
    var remaining = availableCharacters;
    return function (acc, val, index) {
      var title = typeTitle(val);
      remaining -= title.length; // Always include the first type, regardless of title length

      if (index === 0) {
        acc.push(val);
      } else if (availableCharacters > title.length && remaining > title.length) {
        acc.push(val);
      }

      return acc;
    };
  }(), []), [availableCharacters, types]);
  var remainingCount = types.length - visibleTypes.length;

  if (!types.length) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    gap: 1
  }, visibleTypes.map(schemaType => {
    var title = typeTitle(schemaType);
    return /*#__PURE__*/_react.default.createElement(PillCard, {
      $collapsible: visibleTypes.length === 1,
      key: title,
      padding: 2,
      radius: 2
    }, /*#__PURE__*/_react.default.createElement(_components.TextWithTone, {
      size: 1,
      textOverflow: "ellipsis",
      tone: "primary",
      weight: "medium"
    }, title));
  }), !!remainingCount && /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: true,
    size: 1
  }, /*#__PURE__*/_react.default.createElement(RemainingCountBox, {
    marginLeft: 1
  }, "+", remainingCount, " more")));
}

function typeTitle(schemaType) {
  var _schemaType$title;

  return (_schemaType$title = schemaType.title) !== null && _schemaType$title !== void 0 ? _schemaType$title : schemaType.name;
}