var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { flatten, isPlainObject } from 'lodash';
import { error, HELP_IDS } from '../createValidationResult';
import { getDupes } from '../utils/getDupes';
import { validateExperimentalSearch } from '../utils/validateExperimentalSearch';
function normalizeToProp(typeDef) {
    if (Array.isArray(typeDef.to)) {
        return typeDef.to;
    }
    return typeDef.to ? [typeDef.to] : typeDef.to;
}
var VALID_DATASET = /^[a-z0-9~][-_a-z0-9]+$/;
export function isValidDatasetName(name) {
    var isValid = name.length >= 2 && name.toLowerCase() === name && VALID_DATASET.test(name);
    return (isValid ||
        "The provided dataset \"".concat(name, "\" doesn't look like a valid dataset. Dataset names must be more than 2 characters, can only contain lowercase characters, numbers, underscores and dashes and can not start with a dash or an underscore"));
}
var VALID_TOKEN_ID = /^[a-zA-Z0-9_][a-zA-Z0-9_-]+$/;
export function isValidTokenId(tokenId) {
    var isValid = tokenId.length >= 2 && VALID_TOKEN_ID.test(tokenId);
    return (isValid ||
        "The provided tokenId \"".concat(tokenId, "\" is invalid. The tokenId must be a string made up of at least 2 characters in the a-zA-Z0-9_- range and cannot start with a - (dash) character"));
}
export default (function (typeDef, visitorContext) {
    var isValidTo = Array.isArray(typeDef.to) || isPlainObject(typeDef.to);
    var normalizedTo = normalizeToProp(typeDef);
    var problems = flatten([
        isValidTo
            ? getDupes(normalizedTo, function (t) { return "".concat(t.name, ";").concat(t.type); }).map(function (dupes) {
                return error("Found ".concat(dupes.length, " members with same type, but not unique names \"").concat(dupes[0].type, "\" in reference. This makes it impossible to tell their values apart and you should consider naming them"), HELP_IDS.CROSS_DATASET_REFERENCE_INVALID);
            })
            : error('The cross dataset reference type is missing or having an invalid value for the required "to" property. It should be an array of accepted types.', HELP_IDS.CROSS_DATASET_REFERENCE_INVALID),
    ]);
    if (isValidTo && normalizedTo.length === 0) {
        problems.push(error('The cross dataset reference type should define at least one referenced type. Please check the "to" property.', HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));
    }
    normalizedTo.forEach(function (crossDatasetTypeDef, index) {
        if (!crossDatasetTypeDef.type) {
            problems.push(error("The referenced type at index ".concat(index, " must be named. Specify the name of the type you want to create references to."), HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));
        }
        if (!isPlainObject(crossDatasetTypeDef.preview)) {
            problems.push(error("Missing required preview config for the referenced type \"".concat(crossDatasetTypeDef.type || '<unknown type>', "\""), HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));
        }
        validateExperimentalSearch(crossDatasetTypeDef.__experimental_search).forEach(function (err) {
            problems.push(error("Invalid \"__experimental_search\" config for referenced type \"".concat(crossDatasetTypeDef.type || '<unknown type>', "\": ").concat(err), HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));
        });
    });
    if (typeof typeDef.tokenId === 'string') {
        var validationResult = isValidTokenId(typeDef.tokenId);
        if (validationResult !== true) {
            problems.push(error(validationResult, HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));
        }
    }
    if (typeof typeDef.projectId !== 'string') {
        problems.push(error('A cross dataset reference must specify a `projectId`', HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));
    }
    if (typeof typeDef.dataset === 'string') {
        var datasetValidation = isValidDatasetName(typeDef.dataset);
        if (datasetValidation !== true) {
            problems.push(error(datasetValidation, HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));
        }
    }
    else {
        problems.push(error('A cross dataset reference must specify a `dataset`', HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));
    }
    if (typeDef.studioUrl && typeof typeDef.studioUrl !== 'function') {
        problems.push(error('The "studioUrl" property on a cross dataset reference must be a function taking "{id, type}" as argument and returning a studio url.', HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));
    }
    problems.push.apply(problems, __spreadArray([], __read(getOptionErrors(typeDef)), false));
    return __assign(__assign({}, typeDef), { _problems: problems });
});
function getOptionErrors(typeDef) {
    var options = typeDef.options;
    var problems = [];
    problems.push.apply(problems, __spreadArray([], __read(['filter', 'filterParams']
        .filter(function (key) { return key in typeDef; })
        .map(function (key) {
        return error("`".concat(key, "` is not allowed on a reference type definition - did you mean `options.").concat(key, "`?"), HELP_IDS.REFERENCE_INVALID_OPTIONS_LOCATION);
    })), false));
    if (!options) {
        return problems;
    }
    if (!isPlainObject(options)) {
        return problems.concat(error('The reference type expects `options` to be an object', HELP_IDS.REFERENCE_INVALID_OPTIONS));
    }
    if (typeof options.filter === 'function' && typeof options.filterParams !== 'undefined') {
        return problems.concat(error('`filterParams` cannot be used if `filter` is a function. Either statically define `filter` as a string, or return `params` from the `filter`-function.', HELP_IDS.REFERENCE_INVALID_FILTER_PARAMS_COMBINATION));
    }
    if (typeof options.filter === 'function' || (!options.filter && !options.filterParams)) {
        return problems;
    }
    if (typeof options.filter !== 'string') {
        return problems.concat(error("If set, `filter` must be a string. Got ".concat(typeof options.filter)));
    }
    if (typeof options.filterParams !== 'undefined' && !isPlainObject(options.filterParams)) {
        return problems.concat(error("If set, `filterParams` must be an object."));
    }
    if (options.filterParams) {
        return problems.concat(Object.keys(options.filterParams)
            .filter(function (key) { return key.startsWith('__') || key.startsWith('$'); })
            .map(function (key) { return error("Filter parameter cannot be prefixed with \"$\" or \"__\". Got ".concat(key, "\".")); }));
    }
    return problems;
}
//# sourceMappingURL=crossDatasetReference.js.map