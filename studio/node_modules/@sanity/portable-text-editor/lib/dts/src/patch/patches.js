var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import * as DMP from 'diff-match-patch';
export function setIfMissing(value, path) {
    if (path === void 0) { path = []; }
    return {
        type: 'setIfMissing',
        path: path,
        value: value,
    };
}
// eslint-disable-next-line new-cap
var dmp = new DMP.diff_match_patch();
export function diffMatchPatch(currentValue, nextValue, path) {
    if (path === void 0) { path = []; }
    var patch = dmp
        .patch_make(currentValue, nextValue)
        .map(function (_patch) { return _patch.toString(); })
        .join('');
    return { type: 'diffMatchPatch', path: path, value: patch };
}
export function insert(items, position, path) {
    if (path === void 0) { path = []; }
    return {
        type: 'insert',
        path: path,
        position: position,
        items: items,
    };
}
export function set(value, path) {
    if (path === void 0) { path = []; }
    return { type: 'set', path: path, value: value };
}
export function unset(path) {
    if (path === void 0) { path = []; }
    return { type: 'unset', path: path };
}
export function prefixPath(patch, segment) {
    return __assign(__assign({}, patch), { path: __spreadArray([segment], __read(patch.path), false) });
}
//# sourceMappingURL=patches.js.map