import React from 'react';
import { ArraySchemaType, Path } from '@sanity/types';
import { Descendant } from 'slate';
import { PortableTextBlock, PortableTextFeatures, PortableTextChild } from '../types/portableText';
import { RawType, Type } from '../types/schema';
import { EditorSelection, EditorChange, EditorChanges, EditableAPI, InvalidValueResolution, PatchObservable, PortableTextSlateEditor, EditableAPIDeleteOptions } from '../types/editor';
export declare const FLUSH_PATCHES_DEBOUNCE_MS: number;
export declare const defaultKeyGenerator: () => string;
/**
 * Props for the PortableTextEditor component
 *
 * @public
 */
/**
 * Props for the PortableTextEditor component
 *
 * @public
 */
export interface PortableTextEditorProps {
    /**
     * Function that gets called when the editor changes the value
     */
    onChange: (change: EditorChange) => void;
    /**
     * (Compiled or raw JSON) schema type for the portable text field
     */
    type: ArraySchemaType<PortableTextBlock> | RawType;
    /**
     * Maximum number of blocks to allow within the editor
     */
    maxBlocks?: number | string;
    /**
     * Whether or not the editor should be in read-only mode
     */
    readOnly?: boolean;
    /**
     * The current value of the portable text field
     */
    value?: PortableTextBlock[];
    /**
     * Function used to generate keys for array items (`_key`)
     */
    keyGenerator?: () => string;
    /**
     * Observable of incoming patches - used for undo/redo operations,
     * adjusting editor selections on concurrent editing and similar
     */
    incomingPatches$?: PatchObservable;
}
/**
 * @internal
 */
export interface PortableTextEditorState {
    invalidValueResolution: InvalidValueResolution | null;
    selection: EditorSelection | null;
    initialValue: Descendant[];
}
export declare class PortableTextEditor extends React.Component<PortableTextEditorProps, PortableTextEditorState> {
    change$: EditorChanges;
    keyGenerator: () => string;
    maxBlocks: number | undefined;
    portableTextFeatures: PortableTextFeatures;
    readOnly: boolean;
    slateInstance: PortableTextSlateEditor;
    type: ArraySchemaType<PortableTextBlock>;
    incomingPatches$?: PatchObservable;
    private changeSubscription;
    private editable?;
    private pendingPatches;
    private returnedPatches;
    hasPendingLocalPatches: React.MutableRefObject<boolean | null>;
    constructor(props: PortableTextEditorProps);
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: PortableTextEditorProps): void;
    setEditable: (editable: EditableAPI) => void;
    render(): string | JSX.Element;
    syncValue: (userCallbackFn?: () => void) => void;
    private flush;
    private flushDebounced;
    static activeAnnotations: (editor: PortableTextEditor) => PortableTextBlock[];
    static addAnnotation: (editor: PortableTextEditor, type: Type, value?: {
        [prop: string]: unknown;
    } | undefined) => {
        spanPath: Path;
        markDefPath: Path;
    } | undefined;
    static blur: (editor: PortableTextEditor) => void;
    static delete: (editor: PortableTextEditor, selection: EditorSelection, options?: EditableAPIDeleteOptions) => void | undefined;
    static findDOMNode: (editor: PortableTextEditor, element: PortableTextBlock | PortableTextChild) => Node | undefined;
    static findByPath: (editor: PortableTextEditor, path: Path) => [] | [PortableTextBlock | PortableTextChild | undefined, Path | undefined];
    static focus: (editor: PortableTextEditor) => void;
    static focusBlock: (editor: PortableTextEditor) => PortableTextBlock | undefined;
    static focusChild: (editor: PortableTextEditor) => PortableTextChild | undefined;
    static getPortableTextFeatures: (editor: PortableTextEditor) => PortableTextFeatures;
    static getSelection: (editor: PortableTextEditor) => EditorSelection;
    static getValue: (editor: PortableTextEditor) => PortableTextBlock[] | undefined;
    static hasBlockStyle: (editor: PortableTextEditor, blockStyle: string) => boolean | undefined;
    static hasListStyle: (editor: PortableTextEditor, listStyle: string) => boolean | undefined;
    static isCollapsedSelection: (editor: PortableTextEditor) => boolean | undefined;
    static isExpandedSelection: (editor: PortableTextEditor) => boolean | undefined;
    static isMarkActive: (editor: PortableTextEditor, mark: string) => boolean | undefined;
    static insertChild: (editor: PortableTextEditor, type: Type, value?: {
        [prop: string]: unknown;
    } | undefined) => Path | undefined;
    static insertBlock: (editor: PortableTextEditor, type: Type, value?: {
        [prop: string]: unknown;
    } | undefined) => Path | undefined;
    static isVoid: (editor: PortableTextEditor, element: PortableTextBlock | PortableTextChild) => boolean | undefined;
    static isObjectPath: (editor: PortableTextEditor, path: Path) => boolean;
    static marks: (editor: PortableTextEditor) => string[] | undefined;
    static select: (editor: PortableTextEditor, selection: EditorSelection | null) => void;
    static removeAnnotation: (editor: PortableTextEditor, type: Type) => void | undefined;
    static toggleBlockStyle: (editor: PortableTextEditor, blockStyle: string) => void | undefined;
    static toggleList: (editor: PortableTextEditor, listStyle: string) => void;
    static toggleMark: (editor: PortableTextEditor, mark: string) => void;
}
//# sourceMappingURL=PortableTextEditor.d.ts.map