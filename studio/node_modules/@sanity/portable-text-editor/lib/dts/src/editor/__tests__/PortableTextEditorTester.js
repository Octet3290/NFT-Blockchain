import React, { forwardRef, useCallback, useEffect } from 'react';
import Schema from '@sanity/schema';
import { PortableTextEditor, PortableTextEditable } from '../../index';
var imageType = {
    type: 'image',
    name: 'blockImage',
};
var someObject = {
    type: 'object',
    name: 'someObject',
    fields: [{ type: 'string', name: 'color' }],
};
var blockType = {
    type: 'block',
    name: 'myTestBlockType',
    styles: [
        { title: 'Normal', value: 'normal' },
        { title: 'H1', value: 'h1' },
        { title: 'H2', value: 'h2' },
        { title: 'H3', value: 'h3' },
        { title: 'H4', value: 'h4' },
        { title: 'H5', value: 'h5' },
        { title: 'H6', value: 'h6' },
        { title: 'Quote', value: 'blockquote' },
    ],
    of: [someObject, imageType],
};
var portableTextType = {
    type: 'array',
    name: 'body',
    of: [blockType, someObject],
};
var schema = Schema.compile({
    name: 'test',
    types: [portableTextType],
});
var key = 0;
export var PortableTextEditorTester = forwardRef(function PortableTextEditorTester(props, ref) {
    useEffect(function () {
        key = 0;
    });
    var _keyGenerator = useCallback(function () {
        key++;
        return "".concat(key);
    }, []);
    return (React.createElement(PortableTextEditor, { type: props.type, onChange: props.onChange || jest.fn(), value: props.value || undefined, keyGenerator: _keyGenerator, ref: ref },
        React.createElement(PortableTextEditable, { selection: props.selection || undefined, renderPlaceholder: props.renderPlaceholder })));
});
export var type = schema.get('body');
//# sourceMappingURL=PortableTextEditorTester.js.map