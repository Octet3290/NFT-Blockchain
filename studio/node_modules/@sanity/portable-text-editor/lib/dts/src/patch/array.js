var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { findIndex } from 'lodash';
import applyPatch from './applyPatch';
import insert from './arrayInsert';
var hasOwn = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty);
function move(arr, from, to) {
    var nextValue = arr.slice();
    var val = nextValue[from];
    nextValue.splice(from, 1);
    nextValue.splice(to, 0, val);
    return nextValue;
}
function findTargetIndex(array, pathSegment) {
    if (typeof pathSegment === 'number') {
        return pathSegment;
    }
    var index = findIndex(array, pathSegment);
    return index === -1 ? false : index;
}
export default function apply(value, patch) {
    var nextValue = value.slice(); // make a copy for internal mutation
    if (patch.path.length === 0) {
        // its directed to me
        if (patch.type === 'setIfMissing') {
            if (!Array.isArray(patch.value)) {
                // eslint-disable-line max-depth
                throw new Error('Cannot set value of an array to a non-array');
            }
            return value === undefined ? patch.value : value;
        }
        else if (patch.type === 'set') {
            if (!Array.isArray(patch.value)) {
                // eslint-disable-line max-depth
                throw new Error('Cannot set value of an array to a non-array');
            }
            return patch.value;
        }
        else if (patch.type === 'unset') {
            return undefined;
        }
        else if (patch.type === 'move') {
            if (!patch.value || !hasOwn(patch.value, 'from') || !hasOwn(patch.value, 'to')) {
                // eslint-disable-line max-depth
                throw new Error("Invalid value of 'move' patch. Expected a value with \"from\" and \"to\" indexes, instead got: ".concat(JSON.stringify(patch.value)));
            }
            return move(nextValue, patch.value.from, patch.value.to);
        }
        throw new Error("Invalid array operation: ".concat(patch.type));
    }
    var _a = __read(patch.path), head = _a[0], tail = _a.slice(1);
    var index = findTargetIndex(value, head);
    // If the given selector could not be found, return as-is
    if (index === false) {
        return nextValue;
    }
    if (tail.length === 0) {
        if (patch.type === 'insert') {
            var position = patch.position, items = patch.items;
            return insert(value, position, index, items);
        }
        else if (patch.type === 'unset') {
            if (typeof index !== 'number') {
                throw new Error("Expected array index to be a number, instead got \"".concat(index, "\""));
            }
            nextValue.splice(index, 1);
            return nextValue;
        }
    }
    // The patch is not directed to me
    nextValue[index] = applyPatch(nextValue[index], __assign(__assign({}, patch), { path: tail }));
    return nextValue;
}
//# sourceMappingURL=array.js.map