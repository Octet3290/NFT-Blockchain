import blockContentTypeFeatures from './util/blockContentTypeFeatures';
import HtmlDeserializer from './HtmlDeserializer';
import { normalizeBlock } from './util/normalizeBlock';
/**
 * Convert HTML to blocks respecting the block content type's schema
 *
 * @param html - The HTML to convert to blocks
 * @param blockContentType - A compiled version of the schema type for the block content
 * @param options - Options for deserializing HTML to blocks
 * @returns Array of blocks
 * @public
 */
export function htmlToBlocks(html, blockContentType, options) {
    if (options === void 0) { options = {}; }
    var deserializer = new HtmlDeserializer(blockContentType, options);
    return deserializer.deserialize(html).map(function (block) { return normalizeBlock(block); });
}
/**
 * Normalize and extract features of an schema type containing a block type
 *
 * @param blockContentType - Schema type for the block type
 * @returns Returns the featureset of a compiled block content type.
 * @public
 */
export function getBlockContentFeatures(blockContentType) {
    return blockContentTypeFeatures(blockContentType);
}
export { normalizeBlock };
export { randomKey } from './util/randomKey';
//# sourceMappingURL=index.js.map