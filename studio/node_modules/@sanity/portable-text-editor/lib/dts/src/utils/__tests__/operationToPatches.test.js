import { createEditor } from 'slate';
import { getPortableTextFeatures } from '../getPortableTextFeatures';
import { type } from '../../editor/__tests__/PortableTextEditorTester';
import { createOperationToPatches } from '../operationToPatches';
import { withPlugins } from '../../editor/plugins';
import { PortableTextEditor } from '../..';
var portableTextFeatures = getPortableTextFeatures(type);
var operationToPatches = createOperationToPatches(portableTextFeatures);
var editor = withPlugins(createEditor(), {
    portableTextEditor: new PortableTextEditor({ type: type }),
});
var createDefaultValue = function () {
    return [
        {
            _type: 'myTestBlockType',
            _key: '1f2e64b47787',
            style: 'normal',
            markDefs: [],
            children: [
                { _type: 'span', _key: 'c130395c640c', text: '', marks: [] },
                {
                    _key: '773866318fa8',
                    _type: 'someObject',
                    value: { title: 'The Object' },
                    __inline: true,
                    children: [{ _type: 'span', _key: 'bogus', text: '', marks: [] }],
                },
                { _type: 'span', _key: 'fd9b4a4e6c0b', text: '', marks: [] },
            ],
        },
    ];
};
describe('operationToPatches', function () {
    beforeEach(function () {
        editor.children = createDefaultValue();
        editor.onChange();
    });
    it('translates void items correctly when splitting spans', function () {
        expect(operationToPatches.splitNodePatch(editor, {
            type: 'split_node',
            path: [0, 0],
            position: 0,
            properties: { _type: 'span', _key: 'c130395c640c', marks: [] },
        }, createDefaultValue())).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"items\": Array [\n            Object {\n              \"_key\": \"773866318fa8\",\n              \"_type\": \"someObject\",\n              \"title\": \"The Object\",\n            },\n          ],\n          \"path\": Array [\n            Object {\n              \"_key\": \"1f2e64b47787\",\n            },\n            \"children\",\n            Object {\n              \"_key\": \"c130395c640c\",\n            },\n          ],\n          \"position\": \"after\",\n          \"type\": \"insert\",\n        },\n        Object {\n          \"path\": Array [\n            Object {\n              \"_key\": \"1f2e64b47787\",\n            },\n            \"children\",\n            Object {\n              \"_key\": \"c130395c640c\",\n            },\n            \"text\",\n          ],\n          \"type\": \"set\",\n          \"value\": \"\",\n        },\n      ]\n    ");
    });
    it('produce correct insert block patch', function () {
        expect(operationToPatches.insertNodePatch(editor, {
            type: 'insert_node',
            path: [0],
            node: {
                _type: 'someObject',
                _key: 'c130395c640c',
                value: {},
                __inline: false,
                children: [{ _key: '1', _type: 'span', text: '', marks: [] }],
            },
        }, createDefaultValue())).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"items\": Array [\n            Object {\n              \"_key\": \"c130395c640c\",\n              \"_type\": \"someObject\",\n            },\n          ],\n          \"path\": Array [\n            Object {\n              \"_key\": \"1f2e64b47787\",\n            },\n          ],\n          \"position\": \"before\",\n          \"type\": \"insert\",\n        },\n      ]\n    ");
    });
    it('produce correct insert block patch with an empty editor', function () {
        editor.children = [];
        editor.onChange();
        expect(operationToPatches.insertNodePatch(editor, {
            type: 'insert_node',
            path: [0],
            node: {
                _type: 'someObject',
                _key: 'c130395c640c',
                value: {},
                __inline: false,
                children: [{ _key: '1', _type: 'span', text: '', marks: [] }],
            },
        }, [])).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"path\": Array [],\n          \"type\": \"setIfMissing\",\n          \"value\": Array [],\n        },\n        Object {\n          \"items\": Array [\n            Object {\n              \"_key\": \"c130395c640c\",\n              \"_type\": \"someObject\",\n            },\n          ],\n          \"path\": Array [\n            0,\n          ],\n          \"position\": \"before\",\n          \"type\": \"insert\",\n        },\n      ]\n    ");
    });
    it('produce correct insert child patch', function () {
        expect(operationToPatches.insertNodePatch(editor, {
            type: 'insert_node',
            path: [0, 3],
            node: {
                _type: 'someObject',
                _key: 'c130395c640c',
                value: {},
                __inline: true,
                children: [{ _key: '1', _type: 'span', text: '', marks: [] }],
            },
        }, createDefaultValue())).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"items\": Array [\n            Object {\n              \"_key\": \"c130395c640c\",\n              \"_type\": \"someObject\",\n            },\n          ],\n          \"path\": Array [\n            Object {\n              \"_key\": \"1f2e64b47787\",\n            },\n            \"children\",\n            Object {\n              \"_key\": \"fd9b4a4e6c0b\",\n            },\n          ],\n          \"position\": \"after\",\n          \"type\": \"insert\",\n        },\n      ]\n    ");
    });
    it('produce correct insert text patch', function () {
        ;
        editor.children[0].children[2].text = '1';
        editor.onChange();
        expect(operationToPatches.insertTextPatch(editor, {
            type: 'insert_text',
            path: [0, 2],
            text: '1',
            offset: 0,
        }, createDefaultValue())).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"path\": Array [\n            Object {\n              \"_key\": \"1f2e64b47787\",\n            },\n            \"children\",\n            Object {\n              \"_key\": \"fd9b4a4e6c0b\",\n            },\n            \"text\",\n          ],\n          \"type\": \"diffMatchPatch\",\n          \"value\": \"@@ -0,0 +1 @@\n      +1\n      \",\n        },\n      ]\n    ");
    });
    it('produces correct remove text patch', function () {
        var before = createDefaultValue();
        before[0].children[2].text = '1';
        expect(operationToPatches.removeTextPatch(editor, {
            type: 'remove_text',
            path: [0, 2],
            text: '1',
            offset: 1,
        }, before)).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"path\": Array [\n            Object {\n              \"_key\": \"1f2e64b47787\",\n            },\n            \"children\",\n            Object {\n              \"_key\": \"fd9b4a4e6c0b\",\n            },\n            \"text\",\n          ],\n          \"type\": \"diffMatchPatch\",\n          \"value\": \"@@ -1 +0,0 @@\n      -1\n      \",\n        },\n      ]\n    ");
    });
    it('produces correct remove child patch', function () {
        expect(operationToPatches.removeNodePatch(editor, {
            type: 'remove_node',
            path: [0, 1],
            node: {
                _key: '773866318fa8',
                _type: 'someObject',
                value: { title: 'The Object' },
                __inline: true,
                children: [{ _type: 'span', _key: 'bogus', text: '', marks: [] }],
            },
        }, createDefaultValue())).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"path\": Array [\n            Object {\n              \"_key\": \"1f2e64b47787\",\n            },\n            \"children\",\n            Object {\n              \"_key\": \"773866318fa8\",\n            },\n          ],\n          \"type\": \"unset\",\n        },\n      ]\n    ");
    });
    it('produce correct remove block patch', function () {
        var val = createDefaultValue();
        expect(operationToPatches.removeNodePatch(editor, {
            type: 'remove_node',
            path: [0],
            node: val[0],
        }, val)).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"path\": Array [\n            Object {\n              \"_key\": \"1f2e64b47787\",\n            },\n          ],\n          \"type\": \"unset\",\n        },\n      ]\n    ");
    });
    it('produce correct merge node patch', function () {
        var val = createDefaultValue();
        val[0].children.push({
            _type: 'span',
            _key: 'r4wr323432',
            text: '1234',
            marks: [],
        });
        var block = editor.children[0];
        block.children = block.children.splice(0, 3);
        block.children[2].text = '1234';
        editor.onChange();
        expect(operationToPatches.mergeNodePatch(editor, {
            type: 'merge_node',
            path: [0, 3],
            position: 2,
            properties: { text: '1234' },
        }, val)).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"path\": Array [\n            Object {\n              \"_key\": \"1f2e64b47787\",\n            },\n            \"children\",\n            Object {\n              \"_key\": \"fd9b4a4e6c0b\",\n            },\n            \"text\",\n          ],\n          \"type\": \"set\",\n          \"value\": \"1234\",\n        },\n        Object {\n          \"path\": Array [\n            Object {\n              \"_key\": \"1f2e64b47787\",\n            },\n            \"children\",\n            Object {\n              \"_key\": \"r4wr323432\",\n            },\n          ],\n          \"type\": \"unset\",\n        },\n      ]\n    ");
    });
});
//# sourceMappingURL=operationToPatches.test.js.map