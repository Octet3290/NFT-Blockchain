var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { pick } from 'lodash';
import guessPreviewConfig from './guessPreviewConfig';
import { warnIfPreviewOnOptions, warnIfPreviewHasFields } from './deprecationUtils';
function parseSelection(selection) {
    return selection.reduce(function (acc, field) {
        acc[field] = field;
        return acc;
    }, {});
}
function parsePreview(preview) {
    if (!preview) {
        return preview;
    }
    var select = preview.select || preview.fields || {};
    if (Array.isArray(select)) {
        return __assign(__assign({}, pick(preview, ['prepare', 'component'])), { select: parseSelection(select) });
    }
    return __assign(__assign({}, pick(preview, ['prepare', 'component'])), { select: select });
}
export default function createPreviewGetter(objectTypeDef) {
    return function previewGetter() {
        warnIfPreviewOnOptions(objectTypeDef);
        warnIfPreviewHasFields(objectTypeDef);
        var preview = parsePreview(objectTypeDef.preview || (objectTypeDef.options || {}).preview);
        return preview || guessPreviewConfig(objectTypeDef);
    };
}
//# sourceMappingURL=createPreviewGetter.js.map