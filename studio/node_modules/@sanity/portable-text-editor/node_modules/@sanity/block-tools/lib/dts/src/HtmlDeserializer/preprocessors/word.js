import { _XPathResult } from './xpathResult';
var WORD_HTML_REGEX = /(class="?Mso|style=(?:"|')[^"]*?\bmso-|w:WordDocument|<o:\w+>|<\/font>)/;
// xPaths for elements that will be removed from the document
var unwantedPaths = [
    '//o:p',
    "//span[@style='mso-list:Ignore']",
    "//span[@style='mso-list: Ignore']",
];
// xPaths for elements that needs to be remapped into other tags
var mappedPaths = [
    "//p[@class='MsoTocHeading']",
    "//p[@class='MsoTitle']",
    "//p[@class='MsoToaHeading']",
    "//p[@class='MsoSubtitle']",
    "//span[@class='MsoSubtleEmphasis']",
    "//span[@class='MsoIntenseEmphasis']",
];
// Which HTML element(s) to map the elements matching mappedPaths into
var elementMap = {
    MsoTocHeading: ['h3'],
    MsoTitle: ['h1'],
    MsoToaHeading: ['h2'],
    MsoSubtitle: ['h5'],
    MsoSubtleEmphasis: ['span', 'em'],
    MsoIntenseEmphasis: ['span', 'em', 'strong'],
    // Remove cruft
};
function isWordHtml(html) {
    return WORD_HTML_REGEX.test(html);
}
export default (function (html, doc) {
    var _a;
    if (!isWordHtml(html)) {
        return doc;
    }
    var unwantedNodes = doc.evaluate(unwantedPaths.join('|'), doc, function (prefix) {
        if (prefix === 'o') {
            return 'urn:schemas-microsoft-com:office:office';
        }
        return null;
    }, _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    for (var i = unwantedNodes.snapshotLength - 1; i >= 0; i--) {
        var unwanted = unwantedNodes.snapshotItem(i);
        if (unwanted === null || unwanted === void 0 ? void 0 : unwanted.parentNode) {
            unwanted.parentNode.removeChild(unwanted);
        }
    }
    // Transform mapped elements into what they should be mapped to
    var mappedElements = doc.evaluate(mappedPaths.join('|'), doc, null, _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    var _loop_1 = function (i) {
        var mappedElm = mappedElements.snapshotItem(i);
        var tags = elementMap[mappedElm.className];
        var text = new Text(mappedElm.textContent || '');
        if (!tags) {
            return "continue";
        }
        var parentElement = document.createElement(tags[0]);
        var parent_1 = parentElement;
        var child = parentElement;
        tags.slice(1).forEach(function (tag) {
            child = document.createElement(tag);
            parent_1.appendChild(child);
            parent_1 = child;
        });
        child.appendChild(text);
        (_a = mappedElm === null || mappedElm === void 0 ? void 0 : mappedElm.parentNode) === null || _a === void 0 ? void 0 : _a.replaceChild(parentElement, mappedElm);
    };
    for (var i = mappedElements.snapshotLength - 1; i >= 0; i--) {
        _loop_1(i);
    }
    return doc;
});
//# sourceMappingURL=word.js.map