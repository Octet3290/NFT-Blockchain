"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PortableTextInput = void 0;

var _components = require("@sanity/base/components");

var _react = _interopRequireWildcard(require("react"));

var _portableTextEditor = require("@sanity/portable-text-editor");

var _rxjs = require("rxjs");

var _ui = require("@sanity/ui");

var _scrollIntoViewIfNeeded = _interopRequireDefault(require("scroll-into-view-if-needed"));

var _paths = require("@sanity/util/paths");

var _PatchEvent = _interopRequireDefault(require("../../PatchEvent"));

var _withPatchSubscriber = _interopRequireDefault(require("../../utils/withPatchSubscriber"));

var _Compositor = require("./Compositor");

var _InvalidValue = require("./InvalidValue");

var _VisibleOnFocusButton = require("./VisibleOnFocusButton");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// An outer React PureComponent Class purely to satisfy the form-builder's need for 'blur' and 'focus' class methods.
var PortableTextInput = (0, _withPatchSubscriber.default)(class PortableTextInput extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "editorRef", /*#__PURE__*/_react.default.createRef());
  }

  focus() {
    if (this.editorRef.current) {
      _portableTextEditor.PortableTextEditor.focus(this.editorRef.current);
    }
  }

  blur() {
    if (this.editorRef.current) {
      _portableTextEditor.PortableTextEditor.blur(this.editorRef.current);
    }
  }

  render() {
    var _this$props = this.props,
        type = _this$props.type,
        level = _this$props.level,
        markers = _this$props.markers,
        presence = _this$props.presence;
    return /*#__PURE__*/_react.default.createElement(_components.FormField, {
      __unstable_changeIndicator: false,
      __unstable_markers: markers,
      __unstable_presence: presence,
      description: type.description,
      level: level,
      title: type.title
    }, /*#__PURE__*/_react.default.createElement(PortableTextInputController, _extends({}, this.props, {
      ref: this.editorRef
    })));
  }

});
exports.PortableTextInput = PortableTextInput;

var PortableTextInputController = /*#__PURE__*/_react.default.forwardRef(function PortableTextInputController(props, ref) {
  var focusPath = props.focusPath,
      hotkeys = props.hotkeys,
      markers = props.markers,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onCopy = props.onCopy,
      onFocus = props.onFocus,
      onPaste = props.onPaste,
      presence = props.presence,
      readOnly = props.readOnly,
      renderBlockActions = props.renderBlockActions,
      renderCustomMarkers = props.renderCustomMarkers,
      type = props.type,
      value = props.value,
      compareValue = props.compareValue,
      subscribe = props.subscribe;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      hasFocus = _useState2[0],
      setHasFocus = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      ignoreValidationError = _useState4[0],
      setIgnoreValidationError = _useState4[1];

  var _useState5 = (0, _react.useState)(null),
      _useState6 = _slicedToArray(_useState5, 2),
      invalidValue = _useState6[0],
      setInvalidValue = _useState6[1];

  var _useState7 = (0, _react.useState)(false),
      _useState8 = _slicedToArray(_useState7, 2),
      isFullscreen = _useState8[0],
      setIsFullscreen = _useState8[1];

  var _useState9 = (0, _react.useState)(false),
      _useState10 = _slicedToArray(_useState9, 2),
      isActive = _useState10[0],
      setIsActive = _useState10[1]; // Set as active whenever we have focus inside the editor.


  (0, _react.useEffect)(() => {
    if (hasFocus || focusPath.length > 1) {
      setIsActive(true);
    }
  }, [hasFocus, focusPath]);
  var toast = (0, _ui.useToast)(); // Memoized patch stream

  var patchSubject = (0, _react.useMemo)(() => new _rxjs.Subject(), []);
  var remotePatch$ = (0, _react.useMemo)(() => patchSubject.asObservable(), [patchSubject]);
  var innerElementRef = (0, _react.useRef)(null);
  var handleToggleFullscreen = (0, _react.useCallback)(() => {
    if (ref.current) {
      var prevSel = _portableTextEditor.PortableTextEditor.getSelection(ref.current);

      setIsFullscreen(v => !v);
      setTimeout(() => {
        if (ref.current) {
          _portableTextEditor.PortableTextEditor.focus(ref.current);

          if (prevSel) {
            _portableTextEditor.PortableTextEditor.select(ref.current, _objectSpread({}, prevSel));
          }
        }
      });
    }
  }, [ref]); // Reset invalidValue if new value is coming in from props

  (0, _react.useEffect)(() => {
    if (invalidValue && value !== invalidValue.value) {
      setInvalidValue(null);
    }
  }, [invalidValue, value]); // Subscribe to incoming patches

  (0, _react.useEffect)(() => {
    var unsubscribe = subscribe(_ref => {
      var patches = _ref.patches,
          snapshot = _ref.snapshot;

      if (patches.length > 0) {
        patchSubject.next({
          patches,
          snapshot
        });
      }
    });
    return () => unsubscribe();
  }, [patchSubject, subscribe]);
  var handleActivate = (0, _react.useCallback)(() => {
    if (!isActive) {
      setIsActive(true); // Focus the editor in the next tick if needed
      // Next tick because we are in a re-rendering phase of the editor at this point (activating it).

      if (!hasFocus) {
        setTimeout(() => {
          if (ref.current) {
            _portableTextEditor.PortableTextEditor.focus(ref.current);
          }
        });
      }

      if (isActive) {
        setHasFocus(true);
      }
    }
  }, [hasFocus, isActive, ref]); // Handle editor changes

  var handleEditorChange = (0, _react.useCallback)(change => {
    var _PortableTextEditor$g;

    switch (change.type) {
      case 'mutation':
        onChange(_PatchEvent.default.from(change.patches));
        break;

      case 'selection':
        if (shouldSetEditorFormBuilderFocus(ref.current, change.selection, focusPath)) {
          onFocus(change.selection.focus.path);
        }

        break;

      case 'focus':
        setHasFocus(true);
        onFocus(((_PortableTextEditor$g = _portableTextEditor.PortableTextEditor.getSelection(ref.current)) === null || _PortableTextEditor$g === void 0 ? void 0 : _PortableTextEditor$g.focus.path) || []);
        break;

      case 'blur':
        setHasFocus(false);
        onBlur();
        break;

      case 'undo':
      case 'redo':
        onChange(_PatchEvent.default.from(change.patches));
        break;

      case 'invalidValue':
        setInvalidValue(change);
        break;

      case 'error':
        toast.push({
          status: change.level,
          description: change.description
        });
        break;

      default:
    }
  }, [focusPath, onBlur, onChange, onFocus, ref, toast]);
  var handleFocusSkipperClick = (0, _react.useCallback)(() => {
    if (ref.current) {
      _portableTextEditor.PortableTextEditor.focus(ref.current);
    }
  }, [ref]);
  var handleIgnoreValidation = (0, _react.useCallback)(() => {
    setIgnoreValidationError(true);
  }, []);
  var respondToInvalidContent = (0, _react.useMemo)(() => {
    if (invalidValue) {
      return /*#__PURE__*/_react.default.createElement(_ui.Box, {
        marginBottom: 2
      }, /*#__PURE__*/_react.default.createElement(_InvalidValue.InvalidValue, {
        onChange: handleEditorChange,
        onIgnore: handleIgnoreValidation,
        resolution: invalidValue.resolution
      }));
    }

    return null;
  }, [handleEditorChange, handleIgnoreValidation, invalidValue]); // Scroll to *the field* (not the editor) into view if we have focus in the field.
  // For internal editor scrolling see useScrollToFocusFromOutside and useScrollSelectionIntoView in
  // the Compositor component.

  (0, _react.useEffect)(() => {
    if (focusPath && focusPath.length > 0 && innerElementRef.current) {
      (0, _scrollIntoViewIfNeeded.default)(innerElementRef.current, {
        scrollMode: 'if-needed'
      });
    }
  }, [focusPath]);
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: innerElementRef
  }, !readOnly && /*#__PURE__*/_react.default.createElement(_VisibleOnFocusButton.VisibleOnFocusButton, {
    onClick: handleFocusSkipperClick
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Go to content")), !ignoreValidationError && respondToInvalidContent, (!invalidValue || ignoreValidationError) && /*#__PURE__*/_react.default.createElement(_portableTextEditor.PortableTextEditor, {
    ref: ref,
    incomingPatches$: remotePatch$,
    onChange: handleEditorChange,
    maxBlocks: undefined // TODO: from schema?
    ,
    readOnly: readOnly,
    type: type,
    value: value
  }, /*#__PURE__*/_react.default.createElement(_Compositor.Compositor, {
    focusPath: focusPath,
    hasFocus: hasFocus,
    hotkeys: hotkeys,
    isActive: isActive,
    isFullscreen: isFullscreen,
    markers: markers,
    onActivate: handleActivate,
    onChange: onChange,
    onCopy: onCopy,
    onFocus: onFocus,
    onPaste: onPaste,
    onToggleFullscreen: handleToggleFullscreen,
    presence: presence,
    readOnly: readOnly,
    renderBlockActions: renderBlockActions,
    renderCustomMarkers: renderCustomMarkers,
    value: value,
    compareValue: compareValue
  })));
});

function shouldSetEditorFormBuilderFocus(editor, selection, focusPath) {
  return selection && // If we have something selected
  focusPath.slice(-1)[0] !== _paths.FOCUS_TERMINATOR && // Not if in transition to open modal
  _portableTextEditor.PortableTextEditor.isObjectPath(editor, focusPath) === false // Not if this is pointing to an embedded object
  ;
}