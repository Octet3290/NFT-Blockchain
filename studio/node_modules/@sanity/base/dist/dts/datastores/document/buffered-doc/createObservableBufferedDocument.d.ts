import { Mutation } from '@sanity/mutator';
import { Observable, Subject } from 'rxjs';
import { ListenerEvent } from '../getPairListener';
import { DocumentMutationEvent, DocumentRebaseEvent, MutationPayload, SnapshotEvent, RemoteSnapshotEvent } from './types';
/**
 * Represents "commit requests" from the mutator.
 * These are emitted from the BufferedDocument instance's `requestHandler` callback
 */
export interface CommitRequest {
    mutation: Mutation;
    success: () => void;
    failure: (error: Error) => void;
    cancel: (error: Error) => void;
}
export declare const createObservableBufferedDocument: (listenerEvent$: Observable<ListenerEvent>) => {
    updates$: Observable<DocumentRebaseEvent | DocumentMutationEvent | SnapshotEvent>;
    consistency$: Observable<boolean>;
    remoteSnapshot$: Observable<RemoteSnapshotEvent>;
    commitRequest$: Subject<CommitRequest>;
    addMutation: (mutation: MutationPayload) => void;
    addMutations: (mutations: MutationPayload[]) => void;
    commit: () => void;
};
//# sourceMappingURL=createObservableBufferedDocument.d.ts.map