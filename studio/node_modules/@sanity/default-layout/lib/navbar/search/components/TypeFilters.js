"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypeFilters = TypeFilters;

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _commandList = require("../contexts/commandList");

var _search = require("../contexts/search");

var _selectors = require("../contexts/search/selectors");

var _supportsTouch = require("../utils/supportsTouch");

var _CustomTextInput = require("./CustomTextInput");

var _PointerOverlay = require("./PointerOverlay");

var _TypeFilterItem = require("./TypeFilterItem");

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var ClearButtonBox = (0, _styledComponents.default)(_ui.Box)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  border-top: 1px solid ", ";\n"])), _ref => {
  var theme = _ref.theme;
  return theme.sanity.color.base.border;
});
var SearchHeaderBox = (0, _styledComponents.default)(_ui.Box)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  border-bottom: 1px solid ", ";\n"])), _ref2 => {
  var theme = _ref2.theme;
  return theme.sanity.color.base.border;
});
var TypeFiltersContentBox = (0, _styledComponents.default)(_ui.Box)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  overflow-x: hidden;\n  overflow-y: scroll;\n"])));

var TypeFiltersContentDiv = _styledComponents.default.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  position: relative;\n"])));

var TypeFiltersFlex = (0, _styledComponents.default)(_ui.Flex)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  height: 100%;\n"])));

function TypeFilters(_ref3) {
  var small = _ref3.small;

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      childContainerElement = _useState2[0],
      setChildContainerRef = _useState2[1];

  var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      containerElement = _useState4[0],
      setContainerRef = _useState4[1];

  var _useState5 = (0, _react.useState)(null),
      _useState6 = _slicedToArray(_useState5, 2),
      filtersContentElement = _useState6[0],
      setFiltersContentRef = _useState6[1];

  var _useState7 = (0, _react.useState)(null),
      _useState8 = _slicedToArray(_useState7, 2),
      headerInputElement = _useState8[0],
      setHeaderInputRef = _useState8[1];

  var _useState9 = (0, _react.useState)(null),
      _useState10 = _slicedToArray(_useState9, 2),
      pointerOverlayElement = _useState10[0],
      setPointerOverlayRef = _useState10[1];

  var _useState11 = (0, _react.useState)(''),
      _useState12 = _slicedToArray(_useState11, 2),
      typeFilter = _useState12[0],
      setTypeFilter = _useState12[1];

  var _useSearchState = (0, _search.useSearchState)(),
      dispatch = _useSearchState.dispatch,
      selectedTypes = _useSearchState.state.terms.types;

  var selectableDocumentTypes = (0, _react.useMemo)(() => (0, _selectors.getSelectableTypes)(_schema.default, typeFilter), [typeFilter]);
  var handleClearTypes = (0, _react.useCallback)(() => {
    if (!_supportsTouch.supportsTouch) {
      headerInputElement === null || headerInputElement === void 0 ? void 0 : headerInputElement.focus();
    }

    filtersContentElement === null || filtersContentElement === void 0 ? void 0 : filtersContentElement.scrollTo(0, 0);
    dispatch({
      type: 'TERMS_TYPES_CLEAR'
    });
  }, [dispatch, filtersContentElement, headerInputElement]);
  var handleFilterChange = (0, _react.useCallback)(e => setTypeFilter(e.currentTarget.value), [setTypeFilter]);
  var handleFilterClear = (0, _react.useCallback)(() => setTypeFilter(''), []);
  var padding = small ? 1 : 2;
  return /*#__PURE__*/_react.default.createElement(_commandList.CommandListProvider, {
    ariaChildrenLabel: "Document types",
    ariaHeaderLabel: "Filter by document type",
    ariaMultiselectable: true,
    childContainerElement: childContainerElement,
    childCount: selectableDocumentTypes.length,
    containerElement: containerElement,
    headerInputElement: headerInputElement,
    id: "search-type-filters",
    level: 1,
    pointerOverlayElement: pointerOverlayElement
  }, /*#__PURE__*/_react.default.createElement(TypeFiltersFlex, {
    $lightHighlight: !small,
    direction: "column",
    ref: setContainerRef
  }, /*#__PURE__*/_react.default.createElement(SearchHeaderBox, {
    padding: padding
  }, /*#__PURE__*/_react.default.createElement(_CustomTextInput.CustomTextInput, {
    autoComplete: "off",
    border: false,
    clearButton: !!typeFilter,
    fontSize: small ? 1 : 2,
    icon: _icons.SearchIcon,
    muted: true,
    onChange: handleFilterChange,
    onClear: handleFilterClear,
    placeholder: "Document type",
    ref: setHeaderInputRef,
    smallClearButton: true,
    spellCheck: false,
    radius: 2,
    value: typeFilter
  })), /*#__PURE__*/_react.default.createElement(TypeFiltersContentBox, {
    flex: 1,
    padding: padding,
    ref: setFiltersContentRef,
    tabIndex: -1
  }, /*#__PURE__*/_react.default.createElement(TypeFiltersContentDiv, null, /*#__PURE__*/_react.default.createElement(_PointerOverlay.PointerOverlay, {
    ref: setPointerOverlayRef
  }), /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    ref: setChildContainerRef,
    space: 1
  }, selectableDocumentTypes.map((type, index) => /*#__PURE__*/_react.default.createElement(_TypeFilterItem.TypeFilterItem, {
    index: index,
    key: type.name,
    selected: selectedTypes.includes(type),
    small: small,
    type: type
  })))), !selectableDocumentTypes.length && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: true,
    size: small ? 1 : 2,
    textOverflow: "ellipsis"
  }, "No matches for '", typeFilter, "'."))), !typeFilter && selectedTypes.length > 0 && /*#__PURE__*/_react.default.createElement(ClearButtonBox, {
    padding: padding
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, null, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    "aria-label": "Clear checked filters",
    "data-name": "type-filter-button",
    disabled: selectedTypes.length === 0,
    fontSize: small ? 1 : 2,
    mode: "bleed",
    onClick: handleClearTypes,
    padding: 3,
    text: "Clear",
    tone: "primary"
  })))));
}