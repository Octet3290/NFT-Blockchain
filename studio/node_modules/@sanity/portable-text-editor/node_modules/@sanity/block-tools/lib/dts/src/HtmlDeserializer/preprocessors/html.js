import { _XPathResult } from './xpathResult';
// Remove this cruft from the document
var unwantedWordDocumentPaths = [
    '/html/text()',
    '/html/head/text()',
    '/html/body/text()',
    '/html/body/ul/text()',
    '/html/body/ol/text()',
    '//comment()',
    '//style',
    '//xml',
    '//script',
    '//meta',
    '//link',
];
export default (function (html, doc) {
    var _a, _b, _c;
    // Make sure text directly on the body is wrapped in spans.
    // This mimics what the browser does before putting html on the clipboard,
    // when used in a script context with JSDOM
    var bodyTextNodes = doc.evaluate('/html/body/text()', doc, null, _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    for (var i = bodyTextNodes.snapshotLength - 1; i >= 0; i--) {
        var node = bodyTextNodes.snapshotItem(i);
        var text = node.textContent || '';
        if (text.replace(/[^\S\n]+$/g, '')) {
            var newNode = doc.createElement('span');
            newNode.appendChild(doc.createTextNode(text));
            (_a = node.parentNode) === null || _a === void 0 ? void 0 : _a.replaceChild(newNode, node);
        }
        else {
            (_b = node.parentNode) === null || _b === void 0 ? void 0 : _b.removeChild(node);
        }
    }
    var unwantedNodes = doc.evaluate(unwantedWordDocumentPaths.join('|'), doc, null, _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    for (var i = unwantedNodes.snapshotLength - 1; i >= 0; i--) {
        var unwanted = unwantedNodes.snapshotItem(i);
        if (!unwanted) {
            continue;
        }
        (_c = unwanted.parentNode) === null || _c === void 0 ? void 0 : _c.removeChild(unwanted);
    }
    return doc;
});
//# sourceMappingURL=html.js.map