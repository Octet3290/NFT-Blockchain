var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { Editor, Transforms, Element, Text } from 'slate';
import { debugWithName } from '../../utils/debug';
var debug = debugWithName('plugin:withPortableTextLists');
var MAX_LIST_LEVEL = 10;
export function createWithPortableTextLists(portableTextFeatures) {
    return function withPortableTextLists(editor) {
        editor.pteToggleListItem = function (listItemStyle) {
            var isActive = editor.pteHasListStyle(listItemStyle);
            if (isActive) {
                debug("Remove list item '".concat(listItemStyle, "'"));
                editor.pteUnsetListItem(listItemStyle);
            }
            else {
                debug("Add list item '".concat(listItemStyle, "'"));
                editor.pteSetListItem(listItemStyle);
            }
        };
        editor.pteUnsetListItem = function (listItemStyle) {
            if (!editor.selection) {
                return;
            }
            var selectedBlocks = __spreadArray([], __read(Editor.nodes(editor, {
                at: editor.selection,
                match: function (node) {
                    return Element.isElement(node) && node._type === portableTextFeatures.types.block.name;
                },
            })), false);
            selectedBlocks.forEach(function (_a) {
                var _b = __read(_a, 2), node = _b[0], path = _b[1];
                if (editor.isListBlock(node)) {
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    var listItem = node.listItem, level = node.level, rest = __rest(node, ["listItem", "level"]);
                    var newNode = __assign(__assign({}, rest), { listItem: undefined, level: undefined });
                    debug("Unsetting list '".concat(listItemStyle, "'"));
                    Transforms.setNodes(editor, newNode, { at: path });
                }
            });
        };
        editor.pteSetListItem = function (listItemStyle) {
            if (!editor.selection) {
                return;
            }
            var selectedBlocks = __spreadArray([], __read(Editor.nodes(editor, {
                at: editor.selection,
                match: function (node) { return editor.isTextBlock(node); },
            })), false);
            selectedBlocks.forEach(function (_a) {
                var _b = __read(_a, 2), node = _b[0], path = _b[1];
                debug("Setting list '".concat(listItemStyle, "'"));
                Transforms.setNodes(editor, __assign(__assign({}, node), { level: 1, listItem: listItemStyle ||
                        (portableTextFeatures.lists[0] && portableTextFeatures.lists[0].value) }), { at: path });
            });
        };
        editor.pteEndList = function () {
            if (!editor.selection) {
                return false;
            }
            var selectedBlocks = __spreadArray([], __read(Editor.nodes(editor, {
                at: editor.selection,
                match: function (node) {
                    return Element.isElement(node) &&
                        editor.isListBlock(node) &&
                        node.children.length === 1 &&
                        Text.isText(node.children[0]) &&
                        node.children[0].text === '';
                },
            })), false);
            if (selectedBlocks.length === 0) {
                return false;
            }
            selectedBlocks.forEach(function (_a) {
                var _b = __read(_a, 2), node = _b[0], path = _b[1];
                if (Element.isElement(node)) {
                    debug('Unset list');
                    Transforms.setNodes(editor, 
                    // @todo: fix typing
                    __assign(__assign({}, node), { level: undefined, listItem: undefined }), { at: path });
                }
            });
            return true; // Note: we are exiting the plugin chain by not returning editor (or hotkey plugin 'enter' will fire)
        };
        editor.pteIncrementBlockLevels = function (reverse) {
            if (!editor.selection) {
                return false;
            }
            var selectedBlocks = __spreadArray([], __read(Editor.nodes(editor, {
                at: editor.selection,
                match: function (node) { return !!editor.isListBlock(node); },
            })), false);
            if (selectedBlocks.length === 0) {
                return false;
            }
            selectedBlocks.forEach(function (_a) {
                var _b = __read(_a, 2), node = _b[0], path = _b[1];
                if (editor.isListBlock(node)) {
                    var level = node.level || 1;
                    if (reverse) {
                        level--;
                        debug('Decrementing list level', Math.min(MAX_LIST_LEVEL, Math.max(1, level)));
                    }
                    else {
                        level++;
                        debug('Incrementing list level', Math.min(MAX_LIST_LEVEL, Math.max(1, level)));
                    }
                    Transforms.setNodes(editor, { level: Math.min(MAX_LIST_LEVEL, Math.max(1, level)) }, { at: path });
                }
            });
            return true;
        };
        editor.pteHasListStyle = function (listStyle) {
            if (!editor.selection) {
                return false;
            }
            var selectedBlocks = __spreadArray([], __read(Editor.nodes(editor, {
                at: editor.selection,
                match: function (node) { return editor.isListBlock(node) && node.listItem === listStyle; },
            })), false);
            if (selectedBlocks.length > 0) {
                return true;
            }
            return false;
        };
        return editor;
    };
}
//# sourceMappingURL=createWithPortableTextLists.js.map