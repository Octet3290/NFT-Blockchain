var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { error, HELP_IDS } from '../createValidationResult';
import { validateFields, validateField } from './object';
export default (function (typeDef, visitorContext) {
    var problems = [];
    var fields = typeDef.fields;
    if (fields) {
        problems.push.apply(problems, __spreadArray([], __read(validateFields(fields, { allowEmpty: true })), false));
    }
    if (typeDef.options &&
        typeof typeDef.options.metadata !== 'undefined' &&
        !Array.isArray(typeDef.options.metadata)) {
        problems.push(error("Invalid type for file `metadata` field - must be an array of strings", HELP_IDS.ASSET_METADATA_FIELD_INVALID));
    }
    return __assign(__assign({}, typeDef), { fields: (Array.isArray(fields) ? fields : []).map(function (field, index) {
            var name = field.name, fieldTypeDef = __rest(field, ["name"]);
            var _a = visitorContext.visit(fieldTypeDef, index), _problems = _a._problems, fieldType = __rest(_a, ["_problems"]);
            return __assign(__assign({ name: name }, fieldType), { _problems: validateField(field, visitorContext).concat(_problems || []) });
        }), _problems: problems });
});
//# sourceMappingURL=file.js.map