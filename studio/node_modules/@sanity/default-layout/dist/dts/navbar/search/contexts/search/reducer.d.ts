import type { SearchTerms, SearchableType } from '@sanity/base';
import type { CurrentUser } from '@sanity/types';
import { RecentSearchTerms } from '../../datastores/recentSearches';
import type { SearchHit } from '../../types';
export interface SearchReducerState {
    currentUser: CurrentUser;
    filtersVisible: boolean;
    pageIndex: number;
    recentSearches: RecentSearchTerms[];
    result: SearchResult;
    terms: SearchTerms;
}
export interface SearchResult {
    error: Error | null;
    hasMore?: boolean;
    hits: SearchHit[];
    loaded: boolean;
    loading: boolean;
}
export declare function initialSearchState(currentUser: CurrentUser, recentSearches: RecentSearchTerms[]): SearchReducerState;
export declare type FiltersHide = {
    type: 'FILTERS_HIDE';
};
export declare type FiltersShow = {
    type: 'FILTERS_SHOW';
};
export declare type FiltersToggle = {
    type: 'FILTERS_TOGGLE';
};
export declare type PageIncrement = {
    type: 'PAGE_INCREMENT';
};
export declare type RecentSearchesSet = {
    recentSearches: RecentSearchTerms[];
    type: 'RECENT_SEARCHES_SET';
};
export declare type SearchClear = {
    type: 'SEARCH_CLEAR';
};
export declare type SearchRequestComplete = {
    type: 'SEARCH_REQUEST_COMPLETE';
    hits: SearchHit[];
};
export declare type SearchRequestError = {
    type: 'SEARCH_REQUEST_ERROR';
    error: Error;
};
export declare type SearchRequestStart = {
    type: 'SEARCH_REQUEST_START';
};
export declare type TermsQuerySet = {
    type: 'TERMS_QUERY_SET';
    query: string;
};
export declare type TermsSet = {
    type: 'TERMS_SET';
    terms: SearchTerms;
};
export declare type TermsTypeAdd = {
    type: 'TERMS_TYPE_ADD';
    schemaType: SearchableType;
};
export declare type TermsTypeRemove = {
    type: 'TERMS_TYPE_REMOVE';
    schemaType: SearchableType;
};
export declare type TermsTypesClear = {
    type: 'TERMS_TYPES_CLEAR';
};
export declare type SearchAction = FiltersHide | FiltersShow | FiltersToggle | PageIncrement | RecentSearchesSet | SearchClear | SearchRequestComplete | SearchRequestError | SearchRequestStart | TermsQuerySet | TermsSet | TermsTypeAdd | TermsTypeRemove | TermsTypesClear;
export declare function searchReducer(state: SearchReducerState, action: SearchAction): SearchReducerState;
//# sourceMappingURL=reducer.d.ts.map