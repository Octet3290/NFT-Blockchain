var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { pick } from 'lodash';
import createPreviewGetter from '../preview/createPreviewGetter';
import { lazyGetter } from './utils';
import { DEFAULT_OVERRIDEABLE_FIELDS } from './constants';
import { createFieldsets } from './object';
export var ASSET_FIELD = {
    name: 'asset',
    type: 'reference',
    to: { type: 'sanity.fileAsset' },
};
var OVERRIDABLE_FIELDS = __spreadArray([], __read(DEFAULT_OVERRIDEABLE_FIELDS), false);
var FILE_CORE = {
    name: 'file',
    title: 'File',
    type: null,
    jsonType: 'object',
};
var DEFAULT_OPTIONS = {
    accept: '',
};
export var FileType = {
    get: function () {
        return FILE_CORE;
    },
    extend: function (subTypeDef, extendMember) {
        var options = __assign({}, (subTypeDef.options || DEFAULT_OPTIONS));
        var fields = __spreadArray([ASSET_FIELD], __read((subTypeDef.fields || [])), false);
        var parsed = Object.assign(pick(FILE_CORE, OVERRIDABLE_FIELDS), subTypeDef, {
            type: FILE_CORE,
            options: options,
            isCustomized: Boolean(subTypeDef.fields),
        });
        lazyGetter(parsed, 'fields', function () {
            return fields.map(function (fieldDef) {
                var name = fieldDef.name, fieldset = fieldDef.fieldset, type = __rest(fieldDef, ["name", "fieldset"]);
                return {
                    name: name,
                    fieldset: fieldset,
                    type: extendMember(type),
                };
            });
        });
        lazyGetter(parsed, 'fieldsets', function () {
            return createFieldsets(subTypeDef, parsed.fields);
        });
        lazyGetter(parsed, 'preview', createPreviewGetter(Object.assign({}, subTypeDef, { fields: fields })));
        return subtype(parsed);
        function subtype(parent) {
            return {
                get: function () {
                    return parent;
                },
                extend: function (extensionDef) {
                    if (extensionDef.fields) {
                        throw new Error('Cannot override `fields` of subtypes of "file"');
                    }
                    var current = Object.assign({}, parent, pick(extensionDef, OVERRIDABLE_FIELDS), {
                        type: parent,
                    });
                    return subtype(current);
                },
            };
        }
    },
};
//# sourceMappingURL=file.js.map