var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { _XPathResult } from './xpathResult';
function isGoogleDocsDocument(el) {
    if (el.nodeType !== 1) {
        return false;
    }
    var id = el.getAttribute('id');
    return id && id.match(/^docs-internal-guid-/) && el.tagName === 'B';
}
export default (function (html, doc) {
    var _a;
    if (doc.body.firstElementChild && isGoogleDocsDocument(doc.body.firstElementChild)) {
        // Tag every child with attribute 'is-google-docs' so that the GDocs rule-set can
        // work exclusivly on these children
        var childNodes = doc.evaluate('//*', doc, null, _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        for (var i = childNodes.snapshotLength - 1; i >= 0; i--) {
            var elm = childNodes.snapshotItem(i);
            elm === null || elm === void 0 ? void 0 : elm.setAttribute('data-is-google-docs', 'true');
        }
        // Remove that 'b' which Google Docs wraps the HTML content in
        (_a = doc.body.firstElementChild).replaceWith.apply(_a, __spreadArray([], __read(Array.from(doc.body.firstElementChild.childNodes)), false));
        return doc;
    }
    return doc;
});
//# sourceMappingURL=gdocs.js.map