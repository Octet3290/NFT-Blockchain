var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { isSpan } from '@sanity/types';
import { isEqual } from 'lodash';
import { randomKey } from './randomKey';
/**
 * Normalizes a block by ensuring it has a `_key` property. If the block is a
 * portable text block, additional normalization is applied:
 *
 * - Ensures it has `children` and `markDefs` properties
 * - Ensures it has at least one child (adds an empty span if empty)
 * - Joins sibling spans that has the same marks
 * - Removes decorators that are not allowed according to the schema
 * - Removes marks that have no annotation definition
 *
 * @param node - The block to normalize
 * @param options - Options for normalization process. See {@link BlockNormalizationOptions}
 * @returns Normalized block
 * @public
 */
export function normalizeBlock(node, options) {
    if (options === void 0) { options = {}; }
    if (node._type !== (options.blockTypeName || 'block')) {
        return '_key' in node ? node : __assign(__assign({}, node), { _key: randomKey(12) });
    }
    var block = __assign({ _key: randomKey(12), children: [], markDefs: [] }, node);
    var lastChild = block.children[block.children.length - 1];
    if (!lastChild) {
        // A block must at least have an empty span type child
        block.children = [
            {
                _type: 'span',
                _key: "".concat(block._key).concat(0),
                text: '',
                marks: [],
            },
        ];
        return block;
    }
    var usedMarkDefs = [];
    var allowedDecorators = options.allowedDecorators && Array.isArray(options.allowedDecorators)
        ? options.allowedDecorators
        : false;
    block.children = block.children
        .reduce(function (acc, child) {
        var previousChild = acc[acc.length - 1];
        if (previousChild &&
            isSpan(child) &&
            isSpan(previousChild) &&
            isEqual(previousChild.marks, child.marks)) {
            if (lastChild && lastChild === child && child.text === '' && block.children.length > 1) {
                return acc;
            }
            previousChild.text += child.text;
            return acc;
        }
        acc.push(child);
        return acc;
    }, [])
        .map(function (child, index) {
        if (!child) {
            throw new Error('missing child');
        }
        child._key = "".concat(block._key).concat(index);
        if (isSpan(child)) {
            if (!child.marks) {
                child.marks = [];
            }
            else if (allowedDecorators) {
                child.marks = child.marks.filter(function (mark) {
                    var isAllowed = allowedDecorators.includes(mark);
                    var isUsed = block.markDefs.some(function (def) { return def._key === mark; });
                    return isAllowed || isUsed;
                });
            }
            usedMarkDefs.push.apply(usedMarkDefs, __spreadArray([], __read(child.marks), false));
        }
        return child;
    });
    // Remove leftover (unused) markDefs
    block.markDefs = block.markDefs.filter(function (markDef) { return usedMarkDefs.includes(markDef._key); });
    return block;
}
//# sourceMappingURL=normalizeBlock.js.map