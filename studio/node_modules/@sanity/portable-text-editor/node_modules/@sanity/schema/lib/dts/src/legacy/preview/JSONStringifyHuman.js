import { pick } from 'lodash';
function isEmpty(object) {
    for (var key in object) {
        if (object.hasOwnProperty(key)) {
            return false;
        }
    }
    return true;
}
function _stringify(value, options, depth) {
    if (depth > options.maxDepth) {
        return '...';
    }
    if (Array.isArray(value)) {
        if (value.length === 0) {
            return '[empty]';
        }
        var capLength = Math.max(value.length - options.maxBreadth);
        var asString_1 = value
            .slice(0, options.maxBreadth)
            .map(function (item, index) { return _stringify(item, options, depth + 1); })
            .concat(capLength > 0 ? "\u2026+".concat(capLength) : [])
            .join(', ');
        return depth === 0 ? asString_1 : "[".concat(asString_1, "]");
    }
    if (typeof value === 'object' && value !== null) {
        var keys = Object.keys(value).filter(function (key) { return !options.ignoreKeys.includes(key) && typeof value[key] !== 'undefined'; });
        if (isEmpty(pick(value, keys))) {
            return '{empty}';
        }
        var asString_2 = keys
            .slice(0, options.maxBreadth)
            .map(function (key) { return "".concat(key, ": ").concat(_stringify(value[key], options, depth + 1)); })
            .join(', ');
        return depth === 0 ? asString_2 : "{".concat(asString_2, "}");
    }
    var asString = String(value);
    return asString === '' ? '""' : asString;
}
export default function stringify(value, options) {
    if (options === void 0) { options = {}; }
    var opts = {
        maxDepth: 'maxDepth' in options ? options.maxDepth : 2,
        maxBreadth: 'maxBreadth' in options ? options.maxBreadth : 2,
        ignoreKeys: 'ignoreKeys' in options ? options.ignoreKeys : [],
    };
    return _stringify(value, opts, 0);
}
//# sourceMappingURL=JSONStringifyHuman.js.map