"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initialSearchState = initialSearchState;
exports.searchReducer = searchReducer;

var _debug = require("../../utils/debug");

var _selectors = require("./selectors");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function initialSearchState(currentUser, recentSearches) {
  return {
    currentUser,
    filtersVisible: false,
    pageIndex: 0,
    recentSearches,
    result: {
      error: null,
      hasMore: null,
      hits: [],
      loaded: false,
      loading: false
    },
    terms: {
      query: '',
      types: []
    }
  };
}

var debug = (0, _debug.debugWithName)('searchReducer');

function searchReducer(state, action) {
  var prefix = '🔍';

  if (action.type.startsWith('SEARCH_REQUEST')) {
    prefix = '🚨';
  }

  if (action.type.startsWith('RECENT_SEARCHES')) {
    prefix = '💾';
  }

  debug(prefix, action);

  switch (action.type) {
    case 'FILTERS_HIDE':
      return _objectSpread(_objectSpread({}, state), {}, {
        filtersVisible: false
      });

    case 'FILTERS_SHOW':
      return _objectSpread(_objectSpread({}, state), {}, {
        filtersVisible: true
      });

    case 'FILTERS_TOGGLE':
      return _objectSpread(_objectSpread({}, state), {}, {
        filtersVisible: !state.filtersVisible
      });

    case 'PAGE_INCREMENT':
      return _objectSpread(_objectSpread({}, state), {}, {
        pageIndex: state.pageIndex + 1
      });

    case 'RECENT_SEARCHES_SET':
      return _objectSpread(_objectSpread({}, state), {}, {
        recentSearches: action.recentSearches
      });

    case 'SEARCH_CLEAR':
      return _objectSpread(_objectSpread({}, state), {}, {
        pageIndex: 0,
        result: _objectSpread(_objectSpread({}, state.result), {}, {
          hasMore: null,
          hits: []
        })
      });

    case 'SEARCH_REQUEST_COMPLETE':
      return _objectSpread(_objectSpread({}, state), {}, {
        result: _objectSpread(_objectSpread({}, state.result), {}, {
          error: null,
          hasMore: action.hits.length > 0,
          hits: state.pageIndex > 0 ? [...state.result.hits, ...action.hits] : action.hits,
          loaded: true,
          loading: false
        })
      });

    case 'SEARCH_REQUEST_ERROR':
      return _objectSpread(_objectSpread({}, state), {}, {
        result: _objectSpread(_objectSpread({}, state.result), {}, {
          error: action.error,
          loaded: false,
          loading: false
        })
      });

    case 'SEARCH_REQUEST_START':
      return _objectSpread(_objectSpread({}, state), {}, {
        result: _objectSpread(_objectSpread({}, state.result), {}, {
          loaded: false,
          loading: true
        })
      });

    case 'TERMS_QUERY_SET':
      return _objectSpread(_objectSpread({}, state), {}, {
        pageIndex: 0,
        result: _objectSpread(_objectSpread({}, state.result), {}, {
          loaded: false
        }),
        terms: _objectSpread(_objectSpread({}, state.terms), {}, {
          query: action.query
        })
      });

    case 'TERMS_SET':
      return _objectSpread(_objectSpread({}, state), {}, {
        pageIndex: 0,
        result: _objectSpread(_objectSpread({}, state.result), {}, {
          loaded: false
        }),
        terms: action.terms
      });

    case 'TERMS_TYPE_ADD':
      return _objectSpread(_objectSpread({}, state), {}, {
        pageIndex: 0,
        result: _objectSpread(_objectSpread({}, state.result), {}, {
          loaded: false
        }),
        terms: _objectSpread(_objectSpread({}, state.terms), {}, {
          types: [...state.terms.types, action.schemaType].sort(_selectors.sortTypes)
        })
      });

    case 'TERMS_TYPE_REMOVE':
      return _objectSpread(_objectSpread({}, state), {}, {
        pageIndex: 0,
        result: _objectSpread(_objectSpread({}, state.result), {}, {
          loaded: false
        }),
        terms: _objectSpread(_objectSpread({}, state.terms), {}, {
          types: state.terms.types.filter(s => s !== action.schemaType)
        })
      });

    case 'TERMS_TYPES_CLEAR':
      return _objectSpread(_objectSpread({}, state), {}, {
        pageIndex: 0,
        result: _objectSpread(_objectSpread({}, state.result), {}, {
          loaded: false
        }),
        terms: _objectSpread(_objectSpread({}, state.terms), {}, {
          types: []
        })
      });

    default:
      return state;
  }
}