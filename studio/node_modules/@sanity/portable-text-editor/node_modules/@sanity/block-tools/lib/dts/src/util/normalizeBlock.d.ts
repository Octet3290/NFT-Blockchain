import { Block, Span } from '@sanity/types';
import { TypedObject } from '../types';
/**
 * Block normalization options
 *
 * @public
 */
export interface BlockNormalizationOptions {
    /**
     * Decorator names that are allowed within portable text blocks, eg `em`, `strong`
     */
    allowedDecorators?: string[];
    /**
     * Name of the portable text block type, if not `block`
     */
    blockTypeName?: string;
}
/**
 * Normalizes a block by ensuring it has a `_key` property. If the block is a
 * portable text block, additional normalization is applied:
 *
 * - Ensures it has `children` and `markDefs` properties
 * - Ensures it has at least one child (adds an empty span if empty)
 * - Joins sibling spans that has the same marks
 * - Removes decorators that are not allowed according to the schema
 * - Removes marks that have no annotation definition
 *
 * @param node - The block to normalize
 * @param options - Options for normalization process. See {@link BlockNormalizationOptions}
 * @returns Normalized block
 * @public
 */
export declare function normalizeBlock(node: TypedObject, options?: BlockNormalizationOptions): Omit<TypedObject | Block<TypedObject | Span>, '_key'> & {
    _key: string;
};
//# sourceMappingURL=normalizeBlock.d.ts.map