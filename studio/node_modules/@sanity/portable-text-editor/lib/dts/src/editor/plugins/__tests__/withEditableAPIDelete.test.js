/**
 * \@jest-environment ./test/setup/jsdom.jest.env.ts
 */
/* eslint-disable no-irregular-whitespace */
// eslint-disable-next-line import/no-unassigned-import
import '@testing-library/jest-dom/extend-expect';
import { act } from 'react-dom/test-utils';
import { render } from '@testing-library/react';
import React from 'react';
import { PortableTextEditor } from '../../PortableTextEditor';
import { PortableTextEditorTester, type } from '../../__tests__/PortableTextEditorTester';
var initialValue = [
    {
        _key: 'a',
        _type: 'myTestBlockType',
        children: [
            {
                _key: 'a1',
                _type: 'span',
                marks: [],
                text: 'Block A',
            },
        ],
        markDefs: [],
        style: 'normal',
    },
    {
        _key: 'b',
        _type: 'myTestBlockType',
        children: [
            {
                _key: 'b1',
                _type: 'span',
                marks: [],
                text: 'Block B',
            },
        ],
        markDefs: [],
        style: 'normal',
    },
];
var initialSelection = {
    focus: { path: [{ _key: 'b' }, 'children', { _key: 'b1' }], offset: 7 },
    anchor: { path: [{ _key: 'b' }, 'children', { _key: 'b1' }], offset: 7 },
};
describe('plugin:withEditableAPI: .delete()', function () {
    it('deletes block', function () {
        var editorRef = React.createRef();
        var onChange = jest.fn();
        act(function () {
            render(React.createElement(PortableTextEditorTester, { onChange: onChange, ref: editorRef, type: type, value: initialValue }));
        });
        act(function () {
            if (editorRef.current) {
                PortableTextEditor.focus(editorRef.current);
                PortableTextEditor.select(editorRef.current, initialSelection);
            }
        });
        act(function () {
            if (editorRef.current) {
                PortableTextEditor.delete(editorRef.current, PortableTextEditor.getSelection(editorRef.current), { mode: 'blocks' });
            }
        });
        expect(editorRef.current && PortableTextEditor.getValue(editorRef.current))
            .toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"_key\": \"a\",\n          \"_type\": \"myTestBlockType\",\n          \"children\": Array [\n            Object {\n              \"_key\": \"a1\",\n              \"_type\": \"span\",\n              \"marks\": Array [],\n              \"text\": \"Block A\",\n            },\n          ],\n          \"markDefs\": Array [],\n          \"style\": \"normal\",\n        },\n      ]\n    ");
    });
    it('deletes children', function () {
        var editorRef = React.createRef();
        var onChange = jest.fn();
        act(function () {
            render(React.createElement(PortableTextEditorTester, { onChange: onChange, ref: editorRef, type: type, value: initialValue }));
        });
        if (!editorRef.current) {
            throw new Error('No editor');
        }
        act(function () {
            if (editorRef.current) {
                PortableTextEditor.focus(editorRef.current);
                PortableTextEditor.select(editorRef.current, initialSelection);
            }
        });
        act(function () {
            if (editorRef.current) {
                PortableTextEditor.delete(editorRef.current, PortableTextEditor.getSelection(editorRef.current), { mode: 'children' });
            }
        });
        expect(PortableTextEditor.getValue(editorRef.current)).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"_key\": \"a\",\n          \"_type\": \"myTestBlockType\",\n          \"children\": Array [\n            Object {\n              \"_key\": \"a1\",\n              \"_type\": \"span\",\n              \"marks\": Array [],\n              \"text\": \"Block A\",\n            },\n          ],\n          \"markDefs\": Array [],\n          \"style\": \"normal\",\n        },\n        Object {\n          \"_key\": \"b\",\n          \"_type\": \"myTestBlockType\",\n          \"children\": Array [\n            Object {\n              \"_key\": \"1\",\n              \"_type\": \"span\",\n              \"marks\": Array [],\n              \"text\": \"\",\n            },\n          ],\n          \"markDefs\": Array [],\n          \"style\": \"normal\",\n        },\n      ]\n    ");
    });
});
//# sourceMappingURL=withEditableAPIDelete.test.js.map