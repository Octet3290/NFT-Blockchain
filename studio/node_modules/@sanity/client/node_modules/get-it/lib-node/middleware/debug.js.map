{"version":3,"sources":["../../src/middleware/debug.js"],"names":["debugIt","require","SENSITIVE_HEADERS","hasOwn","Object","prototype","hasOwnProperty","redactKeys","source","redacted","target","key","call","indexOf","toLowerCase","module","exports","opts","verbose","namespace","defaultLogger","log","shortCircuit","enabled","requestId","processOptions","options","debug","onRequest","event","method","url","body","headers","redactSensitiveHeaders","JSON","stringify","onResponse","res","context","reqId","statusCode","statusMessage","stringifyBody","onError","err","message","contentType","isJson","tryFormat","parsed","parse"],"mappings":"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","sourcesContent":["const debugIt = require('debug')\n\nconst SENSITIVE_HEADERS = ['cookie', 'authorization']\n\nconst hasOwn = Object.prototype.hasOwnProperty\nconst redactKeys = (source, redacted) => {\n  const target = {}\n  for (const key in source) {\n    if (hasOwn.call(source, key)) {\n      target[key] = redacted.indexOf(key.toLowerCase()) > -1 ? '<redacted>' : source[key]\n    }\n  }\n  return target\n}\n\nmodule.exports = (opts = {}) => {\n  const verbose = opts.verbose\n  const namespace = opts.namespace || 'get-it'\n  const defaultLogger = debugIt(namespace)\n  const log = opts.log || defaultLogger\n  const shortCircuit = log === defaultLogger && !debugIt.enabled(namespace)\n  let requestId = 0\n\n  return {\n    processOptions: options => {\n      options.debug = log\n      options.requestId = options.requestId || ++requestId\n      return options\n    },\n\n    onRequest: event => {\n      // Short-circuit if not enabled, to save some CPU cycles with formatting stuff\n      if (shortCircuit || !event) {\n        return event\n      }\n\n      const options = event.options\n\n      log('[%s] HTTP %s %s', options.requestId, options.method, options.url)\n\n      if (verbose && options.body && typeof options.body === 'string') {\n        log('[%s] Request body: %s', options.requestId, options.body)\n      }\n\n      if (verbose && options.headers) {\n        const headers =\n          opts.redactSensitiveHeaders === false\n            ? options.headers\n            : redactKeys(options.headers, SENSITIVE_HEADERS)\n\n        log('[%s] Request headers: %s', options.requestId, JSON.stringify(headers, null, 2))\n      }\n\n      return event\n    },\n\n    onResponse: (res, context) => {\n      // Short-circuit if not enabled, to save some CPU cycles with formatting stuff\n      if (shortCircuit || !res) {\n        return res\n      }\n\n      const reqId = context.options.requestId\n\n      log('[%s] Response code: %s %s', reqId, res.statusCode, res.statusMessage)\n\n      if (verbose && res.body) {\n        log('[%s] Response body: %s', reqId, stringifyBody(res))\n      }\n\n      return res\n    },\n\n    onError: (err, context) => {\n      const reqId = context.options.requestId\n      if (!err) {\n        log('[%s] Error encountered, but handled by an earlier middleware', reqId)\n        return err\n      }\n\n      log('[%s] ERROR: %s', reqId, err.message)\n      return err\n    }\n  }\n}\n\nfunction stringifyBody(res) {\n  const contentType = (res.headers['content-type'] || '').toLowerCase()\n  const isJson = contentType.indexOf('application/json') !== -1\n  return isJson ? tryFormat(res.body) : res.body\n}\n\n// Attempt pretty-formatting JSON\nfunction tryFormat(body) {\n  try {\n    const parsed = typeof body === 'string' ? JSON.parse(body) : body\n    return JSON.stringify(parsed, null, 2)\n  } catch (err) {\n    return body\n  }\n}\n"],"file":"debug.js"}