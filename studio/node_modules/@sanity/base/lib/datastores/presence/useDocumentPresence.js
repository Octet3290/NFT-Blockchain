"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDocumentPresence = useDocumentPresence;
exports.useDocumentPresenceUsers = useDocumentPresenceUsers;

var _isEqualWith2 = _interopRequireDefault(require("lodash/isEqualWith"));

var _operators = require("rxjs/operators");

var _react = require("react");

var _presenceStore = require("./presence-store");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function useDocumentPresence(documentId) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      ignoreLastActiveUpdates = _ref.ignoreLastActiveUpdates;

  var _useState = (0, _react.useState)([]),
      _useState2 = _slicedToArray(_useState, 2),
      presence = _useState2[0],
      setPresence = _useState2[1];

  (0, _react.useEffect)(() => {
    var presence$ = (0, _presenceStore.documentPresence)(documentId);
    var mapped$ = ignoreLastActiveUpdates ? presence$.pipe((0, _operators.distinctUntilChanged)((x, y) => (0, _isEqualWith2.default)(x, y, trueIfLastActiveAt))) : presence$;
    var subscription = mapped$.subscribe(setPresence);
    return () => {
      subscription.unsubscribe();
    };
  }, [documentId, ignoreLastActiveUpdates]);
  return presence;
}
/**
 * Returns a list of document-level users present in the document, without any additional
 * information on paths or when they were last active etc. This is useful for displaying a
 * list of users without re-rendering on minimal changes.
 *
 * @internal Rework this for v3
 */


function useDocumentPresenceUsers(documentId) {
  var _useState3 = (0, _react.useState)([]),
      _useState4 = _slicedToArray(_useState3, 2),
      presence = _useState4[0],
      setPresence = _useState4[1];

  (0, _react.useEffect)(() => {
    var subscription = (0, _presenceStore.documentPresenceUsers)(documentId).subscribe(setPresence);
    return () => {
      subscription.unsubscribe();
    };
  }, [documentId]);
  return presence;
}
/**
 * For use with `isEqualWith` - returning `undefined` will use the default
 * `isEqual` algorithm, while returning `true` will treat that path as
 * equal. We do this for the `lastActiveAt` property at any level, in order
 * to disregard the timestamp in equality comparisons, if specified
 */


function trueIfLastActiveAt(a, b, key) {
  return key === 'lastActiveAt' ? true : undefined;
}