var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
export var BEFORE = 'before';
export var AFTER = 'after';
export default function insert(array, position, index) {
    var args = [];
    for (var _i = 3; _i < arguments.length; _i++) {
        args[_i - 3] = arguments[_i];
    }
    if (position !== BEFORE && position !== AFTER) {
        throw new Error("Invalid position \"".concat(position, "\", must be either ").concat(BEFORE, " or ").concat(AFTER));
    }
    var items = flatten.apply(void 0, __spreadArray([], __read(args), false));
    if (array.length === 0) {
        return items;
    }
    var len = array.length;
    var idx = Math.abs((len + index) % len) % len;
    var normalizedIdx = position === 'after' ? idx + 1 : idx;
    var copy = array.slice();
    copy.splice.apply(copy, __spreadArray([normalizedIdx, 0], __read(flatten(items)), false));
    return copy;
}
function flatten() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    return values.reduce(function (prev, item) { return prev.concat(item); }, []);
}
//# sourceMappingURL=arrayInsert.js.map