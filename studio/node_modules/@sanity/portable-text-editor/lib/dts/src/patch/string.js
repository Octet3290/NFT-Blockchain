import * as DMP from 'diff-match-patch';
// eslint-disable-next-line new-cap
var dmp = new DMP.diff_match_patch();
var OPERATIONS = {
    replace: function (currentValue, nextValue) {
        return nextValue;
    },
    set: function (currentValue, nextValue) {
        return nextValue;
    },
    setIfMissing: function (currentValue, nextValue) {
        return currentValue === undefined ? nextValue : currentValue;
    },
    unset: function (currentValue, nextValue) {
        return undefined;
    },
    diffMatchPatch: function (currentValue, nextValue) {
        return dmp.patch_apply(dmp.patch_fromText(nextValue), currentValue)[0];
    },
};
var SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS);
export default function apply(value, patch) {
    if (!SUPPORTED_PATCH_TYPES.includes(patch.type)) {
        throw new Error("Received patch of unsupported type: \"".concat(JSON.stringify(patch.type), "\" for string. This is most likely a bug."));
    }
    if (patch.path.length > 0) {
        throw new Error("Cannot apply deep operations on string values. Received patch with type \"".concat(patch.type, "\" and path \"").concat(patch.path.join('.'), " that targeted the value \"").concat(JSON.stringify(value), "\""));
    }
    var func = OPERATIONS[patch.type];
    if (func) {
        return func(value, patch.value);
    }
    throw new Error('Unknown patch type');
}
//# sourceMappingURL=string.js.map