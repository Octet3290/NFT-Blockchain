var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { flatten, get } from 'lodash';
import { error } from './validation/createValidationResult';
/**
 * @internal
 */
export function groupProblems(types) {
    return flatten(types.map(function (type) { return getTypeProblems(type); })).filter(function (type) { return type.problems.length > 0; });
}
function createTypeWithMembersProblemsAccessor(memberPropertyName, getMembers) {
    if (getMembers === void 0) { getMembers = function (type) { return get(type, memberPropertyName); }; }
    return function getProblems(type, parentPath) {
        var currentPath = __spreadArray(__spreadArray([], __read(parentPath), false), [
            { kind: 'type', type: type.type, name: type.name },
        ], false);
        var members = getMembers(type) || [];
        var memberProblems = Array.isArray(members)
            ? members.map(function (memberType) {
                var propertySegment = {
                    kind: 'property',
                    name: memberPropertyName,
                };
                var memberPath = __spreadArray(__spreadArray([], __read(currentPath), false), [propertySegment], false);
                return getTypeProblems(memberType, memberPath);
            })
            : [
                [
                    {
                        path: currentPath,
                        problems: [error("Member declaration (".concat(memberPropertyName, ") is not an array"))],
                    },
                ],
            ];
        return __spreadArray([
            {
                path: currentPath,
                problems: type._problems || [],
            }
        ], __read(flatten(memberProblems)), false);
    };
}
var arrify = function (val) { return (Array.isArray(val) ? val : (typeof val === 'undefined' && []) || [val]); };
var getObjectProblems = createTypeWithMembersProblemsAccessor('fields');
var getImageProblems = createTypeWithMembersProblemsAccessor('fields');
var getFileProblems = createTypeWithMembersProblemsAccessor('fields');
var getArrayProblems = createTypeWithMembersProblemsAccessor('of');
var getReferenceProblems = createTypeWithMembersProblemsAccessor('to', function (type) {
    return 'to' in type ? arrify(type.to) : [];
});
var getBlockAnnotationProblems = createTypeWithMembersProblemsAccessor('marks.annotations');
var getBlockMemberProblems = createTypeWithMembersProblemsAccessor('of');
var getBlockProblems = function (type, problems) { return __spreadArray(__spreadArray([], __read(getBlockAnnotationProblems(type, problems)), false), __read(getBlockMemberProblems(type, problems)), false); };
function getDefaultProblems(type, path) {
    if (path === void 0) { path = []; }
    return [
        {
            path: __spreadArray(__spreadArray([], __read(path), false), [{ kind: 'type', type: type.type, name: type.name }], false),
            problems: type._problems || [],
        },
    ];
}
function getTypeProblems(type, path) {
    if (path === void 0) { path = []; }
    switch (type.type) {
        case 'object': {
            return getObjectProblems(type, path);
        }
        case 'document': {
            return getObjectProblems(type, path);
        }
        case 'array': {
            return getArrayProblems(type, path);
        }
        case 'reference': {
            return getReferenceProblems(type, path);
        }
        case 'block': {
            return getBlockProblems(type, path);
        }
        case 'image': {
            return getImageProblems(type, path);
        }
        case 'file': {
            return getFileProblems(type, path);
        }
        default: {
            return getDefaultProblems(type, path);
        }
    }
}
//# sourceMappingURL=groupProblems.js.map