import { fromSlateValue, toSlateValue } from '../values';
import { type } from '../../editor/__tests__/PortableTextEditorTester';
import { getPortableTextFeatures } from '../getPortableTextFeatures';
var portableTextFeatures = getPortableTextFeatures(type);
describe('toSlateValue', function () {
    it('checks undefined', function () {
        var result = toSlateValue(undefined, { portableTextFeatures: portableTextFeatures });
        expect(result).toHaveLength(0);
    });
    it('runs given empty array', function () {
        var result = toSlateValue([], { portableTextFeatures: portableTextFeatures });
        expect(result).toHaveLength(0);
    });
    it('given type is custom with no custom properties, should include an empty text property in children and an empty value', function () {
        var result = toSlateValue([
            {
                _type: 'image',
                _key: '123',
            },
        ], { portableTextFeatures: portableTextFeatures });
        expect(result).toMatchObject([
            {
                _key: '123',
                _type: 'image',
                children: [
                    {
                        text: '',
                    },
                ],
                value: {},
            },
        ]);
    });
    it('given type is block', function () {
        var result = toSlateValue([
            {
                _type: portableTextFeatures.types.block.name,
                _key: '123',
                children: [
                    {
                        _type: 'span',
                        _key: '1231',
                        text: '123',
                    },
                ],
            },
        ], { portableTextFeatures: portableTextFeatures });
        expect(result).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"_key\": \"123\",\n          \"_type\": \"myTestBlockType\",\n          \"children\": Array [\n            Object {\n              \"_key\": \"1231\",\n              \"_type\": \"span\",\n              \"text\": \"123\",\n            },\n          ],\n          \"markDefs\": Array [],\n          \"style\": \"normal\",\n        },\n      ]\n    ");
    });
    it('given type is block and has custom object in children', function () {
        var result = toSlateValue([
            {
                _type: portableTextFeatures.types.block.name,
                _key: '123',
                children: [
                    {
                        _type: 'span',
                        _key: '1231',
                        text: '123',
                    },
                    {
                        _type: 'image',
                        _key: '1232',
                        asset: {
                            _ref: 'ref-123',
                        },
                    },
                ],
            },
        ], { portableTextFeatures: portableTextFeatures });
        expect(result).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"_key\": \"123\",\n          \"_type\": \"myTestBlockType\",\n          \"children\": Array [\n            Object {\n              \"_key\": \"1231\",\n              \"_type\": \"span\",\n              \"text\": \"123\",\n            },\n            Object {\n              \"__inline\": true,\n              \"_key\": \"1232\",\n              \"_type\": \"image\",\n              \"children\": Array [\n                Object {\n                  \"_key\": \"123-void-child\",\n                  \"_type\": \"span\",\n                  \"marks\": Array [],\n                  \"text\": \"\",\n                },\n              ],\n              \"value\": Object {\n                \"asset\": Object {\n                  \"_ref\": \"ref-123\",\n                },\n              },\n            },\n          ],\n          \"markDefs\": Array [],\n          \"style\": \"normal\",\n        },\n      ]\n    ");
    });
});
describe('fromSlateValue', function () {
    it('runs given empty array', function () {
        var result = fromSlateValue([], 'image');
        expect(result).toHaveLength(0);
    });
    it('converts a slate value to portable text', function () {
        var ptValue = fromSlateValue([
            {
                _type: 'block',
                _key: 'dr239u3',
                children: [
                    {
                        _type: 'span',
                        _key: '252f4swet',
                        marks: [],
                        text: 'Hey ',
                    },
                    {
                        _type: 'image',
                        _key: 'e324t4s',
                        __inline: true,
                        children: [{ _key: '1', _type: 'span', text: '', marks: [] }],
                        value: {
                            asset: { _ref: '32423r32rewr3rwerwer' },
                        },
                    },
                ],
                markDefs: [],
                style: 'normal',
            },
            {
                _type: 'image',
                _key: 'wer32434',
                children: [{ _key: '1', _type: 'span', text: '', marks: [] }],
                value: {
                    asset: { _ref: 'werwer452423423' },
                },
            },
        ], 'block');
        expect(ptValue).toEqual([
            {
                _type: 'block',
                _key: 'dr239u3',
                children: [
                    {
                        _type: 'span',
                        _key: '252f4swet',
                        marks: [],
                        text: 'Hey ',
                    },
                    {
                        _type: 'image',
                        _key: 'e324t4s',
                        asset: { _ref: '32423r32rewr3rwerwer' },
                    },
                ],
                markDefs: [],
                style: 'normal',
            },
            {
                _type: 'image',
                _key: 'wer32434',
                asset: { _ref: 'werwer452423423' },
            },
        ]);
    });
    it('has object equality', function () {
        var keyMap = {};
        var value = [
            {
                _type: 'image',
                _key: 'wer32434',
                asset: { _ref: 'werwer452423423' },
            },
            {
                _type: 'block',
                _key: 'dr239u3',
                children: [
                    {
                        _type: 'span',
                        _key: '252f4swet',
                        marks: [],
                        text: 'Hey ',
                    },
                    {
                        _type: 'image',
                        _key: 'e324t4s',
                        asset: { _ref: '32423r32rewr3rwerwer' },
                    },
                ],
                markDefs: [],
                style: 'normal',
            },
        ];
        var toSlate1 = toSlateValue(value, { portableTextFeatures: portableTextFeatures }, keyMap);
        var toSlate2 = toSlateValue(value, { portableTextFeatures: portableTextFeatures }, keyMap);
        expect(toSlate1[0]).toBe(toSlate2[0]);
        expect(toSlate1[1]).toBe(toSlate2[1]);
        var fromSlate1 = fromSlateValue(toSlate1, 'block', keyMap);
        var fromSlate2 = fromSlateValue(toSlate2, 'block', keyMap);
        expect(fromSlate1[0]).toBe(fromSlate2[0]);
        expect(fromSlate1[1]).toBe(fromSlate2[1]);
    });
});
//# sourceMappingURL=values.test.js.map