'use strict';

var getRandomValues = require('get-random-values-esm');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var getRandomValues__default = /*#__PURE__*/_interopDefaultLegacy(getRandomValues);

var hasOwn = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty);

function isEmptyObject(value) {
    for (const key in value) {
        if (key === '_type' || key === '_key') {
            continue;
        }
        if (hasOwn(value, key) && !isEmpty(value[key])) {
            return false;
        }
    }
    return true;
}
function isEmptyArray(value) {
    for (let i = 0; i < value.length; i++) {
        if (isEmpty(value[i])) {
            return true;
        }
    }
    return false;
}
function isEmpty(value) {
    if (value === undefined || value === null) {
        return true;
    }
    const type = typeof value;
    if (type === 'object') {
        return isEmptyObject(value);
    }
    if (Array.isArray(value)) {
        return isEmptyArray(value);
    }
    return false;
}

const getByteHexTable = (() => {
    let table;
    return () => {
        if (table) {
            return table;
        }
        table = [];
        for (let i = 0; i < 256; ++i) {
            table[i] = (i + 0x100).toString(16).substring(1);
        }
        return table;
    };
})();
// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html
function whatwgRNG(length = 16) {
    const rnds8 = new Uint8Array(length);
    getRandomValues__default["default"](rnds8);
    return rnds8;
}
function randomKey(length) {
    const table = getByteHexTable();
    return whatwgRNG(length)
        .reduce((str, n) => str + table[n], '')
        .slice(0, length);
}

const toString = Object.prototype.toString;
// Copied from https://github.com/ForbesLindesay/type-of, but inlined to have fine grained control
function resolveJSType(val) {
    switch (toString.call(val)) {
        case '[object Function]':
            return 'function';
        case '[object Date]':
            return 'date';
        case '[object RegExp]':
            return 'regexp';
        case '[object Arguments]':
            return 'arguments';
        case '[object Array]':
            return 'array';
        case '[object String]':
            return 'string';
    }
    if (typeof val == 'object' && val && typeof val.length == 'number') {
        try {
            if (typeof val.callee == 'function') {
                // eslint-disable-line max-depth
                return 'arguments';
            }
        }
        catch (ex) {
            if (ex instanceof TypeError) {
                // eslint-disable-line max-depth
                return 'arguments';
            }
        }
    }
    if (val === null) {
        return 'null';
    }
    if (val === undefined) {
        return 'undefined';
    }
    if (val && val.nodeType === 1) {
        return 'element';
    }
    if (val === Object(val)) {
        return 'object';
    }
    return typeof val;
}

function resolveTypeName(value) {
    const jsType = resolveJSType(value);
    if (jsType !== 'object') {
        return jsType;
    }
    const obj = value;
    return ('_type' in obj && obj._type) || jsType;
}

exports.isEmpty = isEmpty;
exports.isEmptyArray = isEmptyArray;
exports.isEmptyObject = isEmptyObject;
exports.randomKey = randomKey;
exports.resolveTypeName = resolveTypeName;
//# sourceMappingURL=content.cjs.map
