import { debugWithName } from '../../utils/debug';
import { toPortableTextRange } from '../../utils/ranges';
import { fromSlateValue } from '../../utils/values';
import { KEY_TO_VALUE_ELEMENT, SLATE_TO_PORTABLE_TEXT_RANGE } from '../../utils/weakMaps';
var debug = debugWithName('plugin:withPortableTextSelections');
// This plugin will make sure that we emit a PT selection whenever the editor has changed.
export function createWithPortableTextSelections(change$, portableTextFeatures) {
    return function withPortableTextSelections(editor) {
        var emitPortableTextSelection = function () {
            var ptRange = null;
            if (editor.selection) {
                var existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);
                if (existing) {
                    ptRange = existing;
                }
                else {
                    ptRange = toPortableTextRange(fromSlateValue(editor.children, portableTextFeatures.types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, portableTextFeatures);
                    SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);
                }
            }
            debug("Emitting selection ".concat(JSON.stringify(ptRange || null)));
            if (ptRange) {
                change$.next({ type: 'selection', selection: ptRange });
            }
            else {
                change$.next({ type: 'selection', selection: null });
            }
        };
        var onChange = editor.onChange;
        editor.onChange = function () {
            var hasChanges = editor.operations.length > 0;
            onChange();
            if (hasChanges) {
                emitPortableTextSelection();
            }
        };
        return editor;
    };
}
//# sourceMappingURL=createWithPortableTextSelections.js.map