import React from 'react';
import { DefaultListItem, DefaultListItemInner } from '.';
export default function TextBlock(props) {
    var portableTextFeatures = props.portableTextFeatures, children = props.children, block = props.block;
    var style = block.style || portableTextFeatures.styles[0].value;
    // Should we render a custom style?
    // TODO: Look into this API. This is legacy support for older Sanity Studio versions via the type
    var CustomStyle;
    var blockStyle = portableTextFeatures && style
        ? portableTextFeatures.styles.find(function (item) { return item.value === style; })
        : undefined;
    if (blockStyle) {
        CustomStyle = blockStyle.blockEditor && blockStyle.blockEditor.render;
    }
    var renderedBlock = children;
    if ('listItem' in block && block.listItem) {
        renderedBlock = (React.createElement(DefaultListItem, { listStyle: block.listItem || portableTextFeatures.lists[0].value, listLevel: block.level || 0 },
            React.createElement(DefaultListItemInner, null, renderedBlock)));
    }
    return (React.createElement(React.Fragment, null,
        !CustomStyle && renderedBlock,
        CustomStyle && React.createElement(CustomStyle, { style: style }, renderedBlock)));
}
//# sourceMappingURL=TextBlock.js.map