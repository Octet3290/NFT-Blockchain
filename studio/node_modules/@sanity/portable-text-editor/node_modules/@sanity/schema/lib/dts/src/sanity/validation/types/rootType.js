var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { error, HELP_IDS, warning } from '../createValidationResult';
import { validateInputComponent } from '../utils/validateInputComponent';
export default (function (typeDef, visitorContext) {
    var hasName = Boolean(typeDef.name);
    if (!hasName && Object.keys(typeDef).length === 1) {
        // Short-circuit on obviously invalid types (only key is _problems)
        return __assign(__assign({}, typeDef), { _problems: [
                error('Invalid/undefined type declaration, check declaration or the import/export of the schema type.', HELP_IDS.TYPE_INVALID),
            ] });
    }
    var problems = [];
    if (looksLikeEsmModule(typeDef)) {
        problems.push(error('Type appears to be an ES6 module imported through CommonJS require - use an import statement or access the `.default` property', HELP_IDS.TYPE_IS_ESM_MODULE));
    }
    else if (!hasName) {
        problems.push(error('Missing type name', HELP_IDS.TYPE_MISSING_NAME));
    }
    else if (visitorContext.isReserved(typeDef.name)) {
        problems.push(error("Invalid type name: \"".concat(typeDef.name, "\" is a reserved name."), HELP_IDS.TYPE_NAME_RESERVED));
    }
    if (visitorContext.isDuplicate(typeDef.name)) {
        problems.push(error("Invalid type name: A type with name \"".concat(typeDef.name, "\" is already defined in the schema.")));
    }
    problems.push.apply(problems, __spreadArray([], __read(validateInputComponent(typeDef)), false));
    if (!('title' in typeDef)) {
        problems.push(warning("Type is missing title. It's recommended to always set a descriptive title.", HELP_IDS.TYPE_TITLE_RECOMMENDED));
    }
    else if (typeof typeDef.title !== 'string') {
        problems.push(warning('Type title is not a string.', HELP_IDS.TYPE_TITLE_INVALID));
    }
    return __assign(__assign({}, typeDef), { _problems: problems });
});
function looksLikeEsmModule(typeDef) {
    return !typeDef.name && typeDef.default && (typeDef.default.name || typeDef.default.title);
}
//# sourceMappingURL=rootType.js.map