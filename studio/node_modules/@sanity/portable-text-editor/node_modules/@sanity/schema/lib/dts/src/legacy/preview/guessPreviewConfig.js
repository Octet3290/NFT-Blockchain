var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { omitBy, isUndefined } from 'lodash';
import arrify from 'arrify';
import { createFallbackPrepare } from './fallbackPrepare';
import { isBlockField } from './portableText';
var TITLE_CANDIDATES = ['title', 'name', 'label', 'heading', 'header', 'caption'];
var DESCRIPTION_CANDIDATES = __spreadArray(['description'], __read(TITLE_CANDIDATES), false);
function fieldHasReferenceTo(fieldDef, refType) {
    return arrify(fieldDef.to || []).some(function (memberTypeDef) { return memberTypeDef.type === refType; });
}
function isImageAssetField(fieldDef) {
    return fieldHasReferenceTo(fieldDef, 'sanity.imageAsset');
}
function resolveImageAssetPath(typeDef) {
    var fields = typeDef.fields || [];
    var imageAssetField = fields.find(isImageAssetField);
    if (imageAssetField) {
        return imageAssetField.name;
    }
    var fieldWithImageAsset = fields.find(function (fieldDef) {
        return (fieldDef.fields || []).some(isImageAssetField);
    });
    return fieldWithImageAsset ? "".concat(fieldWithImageAsset.name, ".asset") : undefined;
}
function isFileAssetField(fieldDef) {
    return fieldHasReferenceTo(fieldDef, 'sanity.fileAsset');
}
function resolveFileAssetPath(typeDef) {
    var fields = typeDef.fields || [];
    var assetField = fields.find(isFileAssetField);
    if (assetField) {
        return assetField.name;
    }
    var fieldWithFileAsset = fields.find(function (fieldDef) {
        return (fieldDef.fields || []).some(isFileAssetField);
    });
    return fieldWithFileAsset ? "".concat(fieldWithFileAsset.name, ".asset") : undefined;
}
export default function guessPreviewFields(rawObjectTypeDef) {
    var objectTypeDef = __assign({ fields: [] }, rawObjectTypeDef);
    var stringFieldNames = objectTypeDef.fields
        .filter(function (field) { return field.type === 'string'; })
        .map(function (field) { return field.name; });
    var blockFieldNames = objectTypeDef.fields.filter(isBlockField).map(function (field) { return field.name; });
    // Check if we have fields with names that is listed in candidate fields
    var titleField = TITLE_CANDIDATES.find(function (candidate) { return stringFieldNames.includes(candidate) || blockFieldNames.includes(candidate); });
    var descField = DESCRIPTION_CANDIDATES.find(function (candidate) {
        return candidate !== titleField &&
            (stringFieldNames.includes(candidate) || blockFieldNames.includes(candidate));
    });
    if (!titleField) {
        // Pick first defined string field
        titleField = stringFieldNames[0] || blockFieldNames[0];
        // Pick next as desc
        descField = stringFieldNames[1] || blockFieldNames[1];
    }
    var mediaField = objectTypeDef.fields.find(function (field) { return field.type === 'image'; });
    var imageAssetPath = resolveImageAssetPath(objectTypeDef);
    if (!titleField) {
        var fileAssetPath = resolveFileAssetPath(objectTypeDef);
        if (fileAssetPath) {
            titleField = "".concat(fileAssetPath, ".originalFilename");
        }
        if (imageAssetPath) {
            titleField = "".concat(imageAssetPath, ".originalFilename");
        }
    }
    if (!titleField && !imageAssetPath) {
        // last resort, pick all fields and concat them
        var fieldNames = objectTypeDef.fields.map(function (field) { return field.name; });
        var fieldMapping = fieldNames.reduce(function (acc, fieldName) {
            acc[fieldName] = fieldName;
            return acc;
        }, {});
        return {
            select: fieldMapping,
            prepare: createFallbackPrepare(fieldNames),
        };
    }
    var select = omitBy({
        title: titleField,
        description: descField,
        imageUrl: !mediaField && imageAssetPath ? "".concat(imageAssetPath, ".url") : undefined,
        media: mediaField ? mediaField.name : undefined,
    }, isUndefined);
    return {
        select: select,
    };
}
//# sourceMappingURL=guessPreviewConfig.js.map