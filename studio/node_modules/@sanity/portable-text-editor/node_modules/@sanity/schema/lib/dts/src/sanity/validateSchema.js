var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { traverseSanitySchema } from './traverseSchema';
import object from './validation/types/object';
import documentVisitor from './validation/types/document';
import reference from './validation/types/reference';
import array from './validation/types/array';
import slug from './validation/types/slug';
import file from './validation/types/file';
import image from './validation/types/image';
import block from './validation/types/block';
import common from './validation/types/common';
import rootType from './validation/types/rootType';
import crossDatasetReference from './validation/types/crossDatasetReference';
var typeVisitors = {
    array: array,
    object: object,
    slug: slug,
    file: file,
    image: image,
    block: block,
    document: documentVisitor,
    reference: reference,
    crossDatasetReference: crossDatasetReference,
};
var getNoopVisitor = function (visitorContext) { return function (schemaDef) { return (__assign(__assign({ name: "<unnamed_type_@_index_".concat(visitorContext.index, ">") }, schemaDef), { _problems: [] })); }; };
function combine() {
    var visitors = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        visitors[_i] = arguments[_i];
    }
    return function (schemaType, visitorContext) {
        return visitors.reduce(function (result, visitor) {
            var res = visitor(result, visitorContext);
            return __assign(__assign({}, res), { _problems: result._problems.concat(res._problems) });
        }, __assign({ _problems: [] }, schemaType));
    };
}
/**
 * @internal
 */
export function validateSchema(schemaTypes) {
    return traverseSanitySchema(schemaTypes, function (schemaDef, visitorContext) {
        var typeVisitor = (schemaDef && schemaDef.type && typeVisitors[schemaDef.type]) ||
            getNoopVisitor(visitorContext);
        if (visitorContext.isRoot) {
            return combine(rootType, common, typeVisitor)(schemaDef, visitorContext);
        }
        return combine(common, typeVisitor)(schemaDef, visitorContext);
    });
}
//# sourceMappingURL=validateSchema.js.map