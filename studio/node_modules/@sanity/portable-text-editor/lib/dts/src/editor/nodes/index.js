var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
import styled from 'styled-components';
export var DefaultBlockObject = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  user-select: none;\n  border: ", ";\n"], ["\n  user-select: none;\n  border: ", ";\n"])), function (props) {
    if (props.selected) {
        return '1px solid blue';
    }
    return '1px solid transparent';
});
export var DefaultInlineObject = styled.span(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  background: #999;\n  border: ", ";\n"], ["\n  background: #999;\n  border: ", ";\n"])), function (props) {
    if (props.selected) {
        return '1px solid blue';
    }
    return '1px solid transparent';
});
export var DefaultListItem = styled.div(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ", ";\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '", "';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ", ";\n    counter-reset: ", ";\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ", ";\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n"], ["\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ", ";\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '", "';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ", ";\n    counter-reset: ", ";\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ", ";\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n"])), function (props) { return getLeftPositionForListLevel(props.listLevel); }, function (props) {
    return getContentForListLevelAndStyle(props.listLevel, props.listStyle);
}, function (props) {
    return getCounterIncrementForListLevel(props.listLevel);
}, function (props) { return getCounterResetForListLevel(props.listLevel); }, function (props) { return getCounterContentForListLevel(props.listLevel); });
export var DefaultListItemInner = styled.div(templateObject_4 || (templateObject_4 = __makeTemplateObject([""], [""])));
function getLeftPositionForListLevel(level) {
    switch (Number(level)) {
        case 1:
            return '1.5em';
        case 2:
            return '3em';
        case 3:
            return '4.5em';
        case 4:
            return '6em';
        case 5:
            return '7.5em';
        case 6:
            return '9em';
        case 7:
            return '10.5em';
        case 8:
            return '12em';
        case 9:
            return '13.5em';
        case 10:
            return '15em';
        default:
            return '0em';
    }
}
var bullets = ['●', '○', '■'];
function getContentForListLevelAndStyle(level, style) {
    var normalizedLevel = (level - 1) % 3;
    if (style === 'bullet') {
        return bullets[normalizedLevel];
    }
    return '*';
}
function getCounterIncrementForListLevel(level) {
    switch (level) {
        case 1:
            return 'listItemNumber';
        case 2:
            return 'listItemAlpha';
        case 3:
            return 'listItemRoman';
        case 4:
            return 'listItemNumberNext';
        case 5:
            return 'listItemLetterNext';
        case 6:
            return 'listItemRomanNext';
        case 7:
            return 'listItemNumberNextNext';
        case 8:
            return 'listItemAlphaNextNext';
        case 9:
            return 'listItemRomanNextNext';
        default:
            return 'listItemNumberNextNextNext';
    }
}
function getCounterResetForListLevel(level) {
    switch (level) {
        case 1:
            return 'listItemAlpha';
        case 2:
            return 'listItemRoman';
        case 3:
            return 'listItemNumberNext';
        case 4:
            return 'listItemLetterNext';
        case 5:
            return 'listItemRomanNext';
        case 6:
            return 'listItemNumberNextNext';
        case 7:
            return 'listItemAlphaNextNext';
        case 8:
            return 'listItemRomanNextNext';
        case 9:
            return 'listItemNumberNextNextNext';
        default:
            return 'listItemNumberNextNextNext';
    }
}
function getCounterContentForListLevel(level) {
    switch (level) {
        case 1:
            return "counter(listItemNumber) '. '";
        case 2:
            return "counter(listItemAlpha, lower-alpha) '. '";
        case 3:
            return "counter(listItemRoman, lower-roman) '. '";
        case 4:
            return "counter(listItemNumberNext) '. '";
        case 5:
            return "counter(listItemLetterNext, lower-alpha) '. '";
        case 6:
            return "counter(listItemRomanNext, lower-roman) '. '";
        case 7:
            return "counter(listItemNumberNextNext) '. '";
        case 8:
            return "counter(listItemAlphaNextNext, lower-alpha) '. '";
        case 9:
            return "counter(listItemRomanNextNext, lower-roman) '. '";
        default:
            return "counter(listItemNumberNextNextNext) '. '";
    }
}
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
//# sourceMappingURL=index.js.map