/* eslint-disable complexity */
/* eslint-disable no-eq-null */
/* eslint-disable max-depth */
/**
 * This plugin will make the editor support undo/redo on the local state only.
 * The undo/redo steps are rebased against incoming patches since the step occurred.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { isEqual, flatten } from 'lodash';
import { Editor, Element as SlateElement, Operation, Path, } from 'slate';
import * as DMP from 'diff-match-patch';
import { debugWithName } from '../../utils/debug';
import { isPatching } from '../../utils/withoutPatching';
var debug = debugWithName('plugin:withUndoRedo');
// eslint-disable-next-line new-cap
var dmp = new DMP.diff_match_patch();
var SAVING = new WeakMap();
var MERGING = new WeakMap();
var UNDO_STEP_LIMIT = 300;
var isMerging = function (editor) {
    return MERGING.get(editor);
};
var isSaving = function (editor) {
    if (!isPatching(editor)) {
        return false;
    }
    return SAVING.get(editor);
};
export function createWithUndoRedo(incomingPatches$) {
    // TODO: unsubscribe to this
    // Subscribe to incoming patches
    var cleanupFn = function () { return undefined; };
    var incomingPatches = [];
    if (incomingPatches$) {
        debug('Subscribing to patches');
        var sub_1 = incomingPatches$.subscribe(function (_a) {
            var patches = _a.patches;
            patches.forEach(function (patch) {
                if (patch.origin !== 'local') {
                    incomingPatches.push({ patch: patch, time: new Date() });
                }
            });
        });
        cleanupFn = function () {
            debug('Unsubscribing to patches');
            sub_1.unsubscribe();
        };
    }
    return [
        function (editor) {
            editor.history = { undos: [], redos: [] };
            var apply = editor.apply;
            // Apply function for merging and saving local history inspired from 'slate-history' by Ian Storm Taylor
            editor.apply = function (op) {
                if (editor.readOnly) {
                    apply(op);
                    return;
                }
                var operations = editor.operations, history = editor.history;
                var undos = history.undos;
                var step = undos[undos.length - 1];
                var lastOp = step && step.operations && step.operations[step.operations.length - 1];
                var overwrite = shouldOverwrite(op, lastOp);
                var save = isSaving(editor);
                var merge = isMerging(editor);
                if (save == null) {
                    save = shouldSave(op, lastOp);
                }
                if (save) {
                    if (merge == null) {
                        if (step == null) {
                            merge = false;
                            // eslint-disable-next-line no-negated-condition
                        }
                        else if (operations.length !== 0) {
                            merge = true;
                        }
                        else {
                            merge = shouldMerge(op, lastOp) || overwrite;
                        }
                    }
                    if (step && merge) {
                        if (overwrite) {
                            step.operations.pop();
                        }
                        step.operations.push(op);
                    }
                    else {
                        var stp = {
                            operations: __spreadArray(__spreadArray([], __read((editor.selection === null ? [] : [createSelectOperation(editor)])), false), [
                                op,
                            ], false),
                            timestamp: new Date(),
                        };
                        undos.push(stp);
                        debug('Created new undo step', step);
                    }
                    while (undos.length > UNDO_STEP_LIMIT) {
                        undos.shift();
                    }
                    if (shouldClear(op)) {
                        history.redos = [];
                    }
                }
                apply(op);
            };
            editor.undo = function () {
                if (editor.readOnly) {
                    return;
                }
                var undos = editor.history.undos;
                if (undos.length > 0) {
                    var step_1 = undos[undos.length - 1];
                    debug('Undoing', step_1);
                    if (step_1.operations.length > 0) {
                        var otherPatches = __spreadArray([], __read(incomingPatches.filter(function (item) { return item.time >= step_1.timestamp; })), false);
                        var transformedOperations_1 = step_1.operations;
                        otherPatches.forEach(function (item) {
                            transformedOperations_1 = flatten(transformedOperations_1.map(function (op) { return transformOperation(editor, item.patch, op); }));
                        });
                        withoutSaving(editor, function () {
                            Editor.withoutNormalizing(editor, function () {
                                transformedOperations_1
                                    .map(Operation.inverse)
                                    .reverse()
                                    .forEach(function (op) {
                                    // Try this as the document could be changed from the outside,
                                    // and sometimes we can't perform the undo operation on the current doc.
                                    try {
                                        editor.apply(op);
                                    }
                                    catch (err) {
                                        debug('Could not perform undo step', err);
                                        editor.history.redos.push(step_1);
                                        editor.history.undos.pop();
                                    }
                                });
                            });
                        });
                    }
                    editor.history.redos.push(step_1);
                    editor.history.undos.pop();
                    editor.onChange();
                }
            };
            editor.redo = function () {
                if (editor.readOnly) {
                    return;
                }
                var redos = editor.history.redos;
                if (redos.length > 0) {
                    var step_2 = redos[redos.length - 1];
                    debug('Redoing', step_2);
                    if (step_2.operations.length > 0) {
                        var otherPatches = incomingPatches.filter(function (item) { return item.time > step_2.timestamp; });
                        var transformedOperations_2 = step_2.operations;
                        otherPatches.forEach(function (item) {
                            transformedOperations_2 = flatten(transformedOperations_2.map(function (op) { return transformOperation(editor, item.patch, op); }));
                        });
                        withoutSaving(editor, function () {
                            Editor.withoutNormalizing(editor, function () {
                                transformedOperations_2.forEach(function (op) {
                                    try {
                                        editor.apply(op);
                                    }
                                    catch (err) {
                                        debug('Could not perform redo step', err);
                                        editor.history.undos.push(step_2);
                                        editor.history.redos.pop();
                                    }
                                });
                            });
                        });
                    }
                    editor.history.undos.push(step_2);
                    editor.history.redos.pop();
                    editor.onChange();
                }
            };
            // Plugin return
            return editor;
        },
        cleanupFn,
    ];
}
// This will adjust the user selection according to patcehes done by others.
// TODO: complete all necessary steps of the algorithm and write tests.
// eslint-disable-next-line max-statements
function transformOperation(editor, patch, operation) {
    // debug(`Rebasing selection for patch ${patch.type} against operation ${operation.type}`)
    var e_1, _a, e_2, _b;
    var transformedOperation = __assign({}, operation);
    if (patch.type === 'insert' && patch.path.length === 1) {
        return [adjustBlockPath(editor, patch, operation, patch.items.length)];
    }
    if (patch.type === 'unset' && patch.path.length === 1) {
        return [adjustBlockPath(editor, patch, operation, -1)];
    }
    // Someone reset the whole value
    if (patch.type === 'unset' && patch.path.length === 0) {
        debug("Adjusting selection for unset everything patch and ".concat(operation.type, " operation"));
        return [operation];
    }
    if (patch.type === 'diffMatchPatch') {
        var blockIndex = editor.children.findIndex(function (blk) { return isEqual({ _key: blk._key }, patch.path[0]); });
        var block = editor.children[blockIndex];
        if (SlateElement.isElement(block) && Array.isArray(block.children)) {
            var childIndex = block.children.findIndex(function (child) {
                return isEqual({ _key: child._key }, patch.path[2]);
            });
            var parsed = dmp.patch_fromText(patch.value)[0];
            if (!parsed) {
                debug('Could not parse diffMatchPatch', patch);
                return [operation];
            }
            var distance = parsed.length2 - parsed.length1;
            var patchIsRemovingText = parsed.diffs.some(function (diff) { return diff[0] === -1; });
            if (operation.type === 'split_node' && operation.path.length > 1) {
                var splitOperation = transformedOperation;
                if (patchIsRemovingText) {
                    splitOperation.position -= distance;
                }
                else {
                    splitOperation.position += distance;
                }
                return [splitOperation];
            }
            if ((operation.type === 'insert_text' || operation.type === 'remove_text') &&
                Path.isPath(operation.path) &&
                operation.path[0] !== undefined &&
                operation.path[0] === blockIndex &&
                operation.path[1] === childIndex) {
                if (operation.type === 'insert_text') {
                    var insertOffset = 0;
                    try {
                        for (var _c = __values(parsed.diffs), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var diff = _d.value;
                            if (diff[0] === 0) {
                                insertOffset = diff[1].length;
                            }
                            if (diff[0] === 1) {
                                break;
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    if (parsed.start1 !== null && insertOffset + parsed.start1 <= operation.offset) {
                        var insertTextOperation = transformedOperation;
                        insertTextOperation.offset += distance;
                        transformedOperation = insertTextOperation;
                    }
                    // TODO: deal with overlapping ranges
                    return [transformedOperation];
                }
                if (operation.type === 'remove_text') {
                    var insertOffset = 0;
                    try {
                        for (var _e = __values(parsed.diffs), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var diff = _f.value;
                            if (diff[0] === 0) {
                                insertOffset = diff[1].length;
                            }
                            if (diff[0] === -1) {
                                break;
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    if (parsed.start1 !== null && insertOffset + parsed.start1 <= operation.offset) {
                        var removeTextOperation = transformedOperation;
                        removeTextOperation.offset -= distance;
                        transformedOperation = removeTextOperation;
                    }
                    return [transformedOperation];
                }
            }
            // // Selection operations with diffPatchMatch
            // if (operation.type === 'set_selection') {
            //   const newProperties = transformedOperation.newProperties
            //   if (newProperties && patchIsRemovingText) {
            //     newProperties.offset = newProperties.offset - distance
            //   } else if (newProperties) {
            //     newProperties.offset = newProperties.offset + distance
            //   }
            //   return [newProperties ? {...transformedOperation, newProperties} : transformedOperation]
            // }
        }
        // TODO: transform this?
        // if (operation.type === 'set_selection' && patch.type !== 'diffMatchPatch') {
        //   console.log('set_selection other', JSON.stringify(patch))
        // }
    }
    return [operation];
}
function adjustBlockPath(editor, patch, operation, level) {
    var myIndex = editor.children.findIndex(function (blk) { return isEqual({ _key: blk._key }, patch.path[0]); });
    if (myIndex >= 0 &&
        operation.type !== 'set_selection' &&
        Array.isArray(operation.path) &&
        operation.path[0] !== undefined &&
        operation.path[0] >= myIndex + level) {
        var transformedOperation = __assign({}, operation);
        var newPath = __spreadArray([operation.path[0] + level], __read(operation.path.slice(1)), false);
        debug("Adjusting ".concat(operation.type, " for block ").concat(patch.type), operation.path, newPath);
        transformedOperation.path = newPath;
        return transformedOperation;
    }
    return operation;
}
// Helper functions for editor.apply above
var shouldMerge = function (op, prev) {
    if (op.type === 'set_selection') {
        return true;
    }
    // Text input
    if (prev &&
        op.type === 'insert_text' &&
        prev.type === 'insert_text' &&
        op.offset === prev.offset + prev.text.length &&
        Path.equals(op.path, prev.path) &&
        op.text !== ' ' // Tokenize between words
    ) {
        return true;
    }
    // Text deletion
    if (prev &&
        op.type === 'remove_text' &&
        prev.type === 'remove_text' &&
        op.offset + op.text.length === prev.offset &&
        Path.equals(op.path, prev.path)) {
        return true;
    }
    // Don't merge
    return false;
};
var shouldSave = function (op, prev) {
    if (op.type === 'set_selection' && op.newProperties === null) {
        return false;
    }
    return true;
};
var shouldOverwrite = function (op, prev) {
    if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {
        return true;
    }
    return false;
};
var shouldClear = function (op) {
    if (op.type === 'set_selection') {
        return false;
    }
    return true;
};
export function withoutSaving(editor, fn) {
    var prev = isSaving(editor);
    SAVING.set(editor, false);
    fn();
    SAVING.set(editor, prev);
}
function createSelectOperation(editor) {
    return {
        type: 'set_selection',
        properties: __assign({}, editor.selection),
        newProperties: __assign({}, editor.selection),
    };
}
//# sourceMappingURL=createWithUndoRedo.js.map