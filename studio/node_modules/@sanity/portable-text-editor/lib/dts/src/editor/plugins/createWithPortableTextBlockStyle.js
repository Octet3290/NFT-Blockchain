var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { Editor, Transforms, Element, Path, Text as SlateText } from 'slate';
import { debugWithName } from '../../utils/debug';
import { toPortableTextRange } from '../../utils/ranges';
import { fromSlateValue } from '../../utils/values';
var debug = debugWithName('plugin:withPortableTextBlockStyle');
export function createWithPortableTextBlockStyle(portableTextFeatures, change$) {
    var defaultStyle = portableTextFeatures.styles[0].value;
    return function withPortableTextBlockStyle(editor) {
        // Extend Slate's default normalization to reset split node to normal style
        // if there is no text at the right end of the split.
        var normalizeNode = editor.normalizeNode;
        editor.normalizeNode = function (nodeEntry) {
            var e_1, _a;
            normalizeNode(nodeEntry);
            var _b = __read(nodeEntry, 2), path = _b[1];
            try {
                for (var _c = __values(editor.operations), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var op = _d.value;
                    if (op.type === 'split_node' &&
                        op.path.length === 1 &&
                        editor.isTextBlock(op.properties) &&
                        op.properties.style !== defaultStyle &&
                        op.path[0] === path[0] &&
                        !Path.equals(path, op.path)) {
                        var _e = __read(Editor.node(editor, [op.path[0] + 1, 0]), 1), child = _e[0];
                        if (SlateText.isText(child) && child.text === '') {
                            debug("Normalizing split node to ".concat(defaultStyle, " style"), op);
                            Transforms.setNodes(editor, { style: defaultStyle }, { at: [op.path[0] + 1], voids: false });
                            break;
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        editor.pteHasBlockStyle = function (style) {
            if (!editor.selection) {
                return false;
            }
            var selectedBlocks = __spreadArray([], __read(Editor.nodes(editor, {
                at: editor.selection,
                match: function (node) { return editor.isTextBlock(node) && node.style === style; },
            })), false);
            if (selectedBlocks.length > 0) {
                return true;
            }
            return false;
        };
        editor.pteToggleBlockStyle = function (blockStyle) {
            if (!editor.selection) {
                return;
            }
            var selectedBlocks = __spreadArray([], __read(Editor.nodes(editor, {
                at: editor.selection,
                match: function (node) {
                    return Element.isElement(node) && node._type === portableTextFeatures.types.block.name;
                },
            })), false);
            selectedBlocks.forEach(function (_a) {
                var _b = __read(_a, 2), node = _b[0], path = _b[1];
                if (editor.isTextBlock(node) && node.style === blockStyle) {
                    debug("Unsetting block style '".concat(blockStyle, "'"));
                    Transforms.setNodes(editor, __assign(__assign({}, node), { style: defaultStyle }), {
                        at: path,
                    });
                }
                else {
                    if (blockStyle) {
                        debug("Setting style '".concat(blockStyle, "'"));
                    }
                    else {
                        debug('Setting default style', defaultStyle);
                    }
                    Transforms.setNodes(editor, __assign(__assign({}, node), { style: blockStyle || defaultStyle }), { at: path });
                }
            });
            // Emit a new selection here (though it might be the same).
            // Toolbars and similar on the outside may rely on selection changes to update themselves.
            change$.next({
                type: 'selection',
                selection: toPortableTextRange(fromSlateValue(editor.children, portableTextFeatures.types.block.name), editor.selection, portableTextFeatures),
            });
            editor.onChange();
        };
        return editor;
    };
}
//# sourceMappingURL=createWithPortableTextBlockStyle.js.map