var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { pick } from 'lodash';
import primitivePreview from '../preview/primitivePreview';
import { DEFAULT_OVERRIDEABLE_FIELDS } from './constants';
var OVERRIDABLE_FIELDS = __spreadArray([], __read(DEFAULT_OVERRIDEABLE_FIELDS), false);
var EMAIL_CORE = {
    name: 'email',
    title: 'Email',
    type: null,
    jsonType: 'string',
};
export var EmailType = {
    get: function () {
        return EMAIL_CORE;
    },
    extend: function (subTypeDef) {
        var parsed = Object.assign(pick(EMAIL_CORE, OVERRIDABLE_FIELDS), subTypeDef, {
            type: EMAIL_CORE,
            preview: primitivePreview,
        });
        return subtype(parsed);
        function subtype(parent) {
            return {
                get: function () {
                    return parent;
                },
                extend: function (extensionDef) {
                    var current = Object.assign({}, parent, pick(extensionDef, OVERRIDABLE_FIELDS), {
                        type: parent,
                    });
                    return subtype(current);
                },
            };
        }
    },
};
//# sourceMappingURL=email.js.map