"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypeFilterItem = TypeFilterItem;

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _commandList = require("../contexts/commandList");

var _search = require("../contexts/search");

var _templateObject;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var TypeFilterItemButton = (0, _styledComponents.default)(_ui.Button)(_ref => {
  var $level = _ref.$level;
  return (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    [data-focused='true'][data-level='", "'] &,\n    [data-hovered='true'][data-level='", "'] & {\n      &[data-active='true'] {\n        background: ", ";\n        // Disable box-shadow to hide the halo effect when we have keyboard focus over a selected <Button>\n        box-shadow: none;\n      }\n    }\n  "])), $level, $level, _ref2 => {
    var theme = _ref2.theme;
    return theme.sanity.color.button.bleed.default.hovered.bg;
  });
});

function TypeFilterItem(_ref3) {
  var _type$title, _type$title2;

  var index = _ref3.index,
      selected = _ref3.selected,
      small = _ref3.small,
      type = _ref3.type;

  var _useSearchState = (0, _search.useSearchState)(),
      dispatch = _useSearchState.dispatch;

  var _useCommandList = (0, _commandList.useCommandList)(),
      level = _useCommandList.level,
      onChildClick = _useCommandList.onChildClick,
      onChildMouseDown = _useCommandList.onChildMouseDown,
      onChildMouseEnter = _useCommandList.onChildMouseEnter;

  var handleTypeAdd = (0, _react.useCallback)(() => {
    dispatch({
      type: 'TERMS_TYPE_ADD',
      schemaType: type
    });
  }, [dispatch, type]);
  var handleTypeRemove = (0, _react.useCallback)(() => {
    dispatch({
      type: 'TERMS_TYPE_REMOVE',
      schemaType: type
    });
  }, [dispatch, type]);
  var handleClick = (0, _react.useCallback)(() => {
    onChildClick === null || onChildClick === void 0 ? void 0 : onChildClick();

    if (selected) {
      handleTypeRemove();
    } else {
      handleTypeAdd();
    }
  }, [handleTypeAdd, handleTypeRemove, onChildClick, selected]);
  return /*#__PURE__*/_react.default.createElement(TypeFilterItemButton, {
    $level: level,
    "aria-selected": selected,
    "data-index": index,
    fontSize: small ? 1 : 2,
    iconRight: selected && _icons.CheckmarkIcon,
    justify: "flex-start",
    key: (_type$title = type.title) !== null && _type$title !== void 0 ? _type$title : type.name,
    mode: "bleed",
    onClick: handleClick,
    onMouseDown: onChildMouseDown,
    onMouseEnter: onChildMouseEnter(index),
    selected: selected,
    text: (_type$title2 = type.title) !== null && _type$title2 !== void 0 ? _type$title2 : type.name,
    tone: selected ? 'primary' : 'default'
  });
}