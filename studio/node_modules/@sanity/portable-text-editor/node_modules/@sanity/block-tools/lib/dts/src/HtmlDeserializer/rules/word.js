var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { DEFAULT_BLOCK, BLOCK_DEFAULT_STYLE } from '../../constants';
import { isElement, tagName } from '../helpers';
function getListItemStyle(el) {
    var style = isElement(el) && el.getAttribute('style');
    if (!style) {
        return undefined;
    }
    if (!style.match(/lfo\d+/)) {
        return undefined;
    }
    return style.match('lfo1') ? 'bullet' : 'number';
}
function getListItemLevel(el) {
    var style = isElement(el) && el.getAttribute('style');
    if (!style) {
        return undefined;
    }
    var levelMatch = style.match(/level\d+/);
    if (!levelMatch) {
        return undefined;
    }
    var _a = __read(levelMatch[0].match(/\d/) || [], 1), level = _a[0];
    var levelNum = level ? parseInt(level, 10) : 1;
    return levelNum || 1;
}
function isWordListElement(el) {
    return isElement(el) && el.className
        ? el.className === 'MsoListParagraphCxSpFirst' ||
            el.className === 'MsoListParagraphCxSpMiddle' ||
            el.className === 'MsoListParagraphCxSpLast'
        : false;
}
export default function createWordRules() {
    return [
        {
            deserialize: function (el, next) {
                if (tagName(el) === 'p' && isWordListElement(el)) {
                    return __assign(__assign({}, DEFAULT_BLOCK), { listItem: getListItemStyle(el), level: getListItemLevel(el), style: BLOCK_DEFAULT_STYLE, children: next(el.childNodes) });
                }
                return undefined;
            },
        },
    ];
}
//# sourceMappingURL=word.js.map