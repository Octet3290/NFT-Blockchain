var OPERATIONS = {
    replace: function (_currentValue, nextValue) {
        return nextValue;
    },
    set: function (_currentValue, nextValue) {
        return nextValue;
    },
    setIfMissing: function (currentValue, nextValue) {
        return currentValue === undefined ? nextValue : currentValue;
    },
    unset: function (_currentValue, _nextValue) {
        return undefined;
    },
    inc: function (currentValue, nextValue) {
        return currentValue + nextValue;
    },
    dec: function (currentValue, nextValue) {
        return currentValue - nextValue;
    },
};
var SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS);
export default function apply(value, patch) {
    if (!SUPPORTED_PATCH_TYPES.includes(patch.type)) {
        throw new Error("Received patch of unsupported type: \"".concat(JSON.stringify(patch.type), "\" for primitives. This is most likely a bug."));
    }
    if (patch.path.length > 0) {
        throw new Error("Cannot apply deep operations on primitive values. Received patch with type \"".concat(patch.type, "\" and path \"").concat(patch.path
            .map(function (path) { return JSON.stringify(path); })
            .join('.'), " that targeted the value \"").concat(JSON.stringify(value), "\""));
    }
    return OPERATIONS[patch.type](value, patch.value);
}
//# sourceMappingURL=primitive.js.map